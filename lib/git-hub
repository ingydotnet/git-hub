#!/bin/bash
#
# git-hub: Do GitHub operations from the `git` command
#
# Copyright (c) 2013 Ingy döt Net

set -e

GIT_HUB_VERSION=0.0.2

OPTIONS_SPEC="\
git hub <command> <options> <arguments>

Commands:
  config, config-unset
  token-list, token-create, token-delete
  scope-list, scope-add, scope-remove

  user, user-edit, orgs, org, org-edit, members, teams
  repos, repo, repo-edit, repo-create, repo-delete
  forks, fork
  stars, star, unstar, starred
  collabs, trust, untrust
  followers, following, follow, unfollow

Aliases:
  create == repo-create

See 'git help hub' for complete documentation and usage of each command.

Options:
--
c,count=    Number of list items to show
a,all       Show all list items
r,raw       Show output in a raw data form
token=      GitHub v3 API Authentication Token

h,help      Show this help
q,quiet     Show minimal output
v,verbose   Show verbose output
d,dryrun    Don't run the API command
T           Show API token in the verbose output
A,use-auth  Force the use of authentication. (Get around rate limits)

O           dev - Show response output
H           dev - Show reponse headers
J           dev - Show parsed JSON response
R           dev - Repeat last command without contacting server
x           dev - Turn on Bash trace (set -x) output
"

#------------------------------------------------------------------------------
GitHub.main() {
	GitHub.assert-env
	GitHub.get-options "$@"
	GitHub.setup-env

	GitHub.callable GitHub."$command" ||
		die "Unknown 'git hub' command: '$command'"
	GitHub."$command" "$@"

	if OK; then
		if GitHub.callable "GitHub.success-$command"; then
			"GitHub.success-$command"
		else
			if [ "$message_success" != '0' ]; then
				say ${message_success:-"'git hub $command' successful"}
			fi
		fi
		exit 0
	elif [ -n "$status_code" ] && GitHub.callable "status-$status_code-$command"; then
		"status-$status_code-$command"
		exit $OK
	elif [ -n "$(eval "echo \$message_$status_code")" ]; then
		say $(eval "echo \$message_$status_code")
		exit $OK
	elif GitHub.callable "failure-$command"; then
		"failure-$command"
		exit $OK
	else
		say ${message_failure:-"'git hub $command' failed: $status_code"}
		say "$ERROR"
		exit $OK
	fi
}

#------------------------------------------------------------------------------
# `git hub` command functions:
#------------------------------------------------------------------------------
GitHub.config() {
    GitHub.get-args config_key config_value
	message_success=0
	if [ -z "$config_key" ]; then
		cat $config_file
	elif [ -z "$config_value" ]; then
		git config -f $config_file github.$config_key
	else
		message_success="$config_key=$config_value"
		git config -f $config_file github.$config_key "$config_value"
	fi
	OK=$?
}

GitHub.config-unset() {
    GitHub.get-args config_key
	[ -n "$config_key" ] ||
		die "This command requires a config key"
	git config -f $config_file --unset github.$config_key
	OK=$?
	message_success="Config key '$config_key' has been unset."
}

GitHub.token-list() {
	basic_auth="1"
	GitHub.report-list \
		'/authorizations' \
		'token id note app/name'
}

GitHub.format-token-list-entry() {
	if RAW || QUIET; then
		printf "%-7s  %s\n" $3 "${4:-$5}"
	else
		printf "%d) %s %-14s  %s\n" $1 $2 "(id: $3)" "${4:-$5}"
	fi
}

GitHub.token-create() {
	local json
	GitHub.get-args note
	if [ -n "$note" ]; then
		json=$(GitHub.json-dump-object "note" "$note")
	else
		json='{}'
	fi
	basic_auth="1"
	GitHub.api-post '/authorizations' "$json"
}

GitHub.success-token-create() {
	local token=$(GitHub.json-get "/token")
	[ -n "$token" ] || die "Can't figure out token value"
	local id=$(GitHub.json-get "/id")
	local note=$(GitHub.json-get "/note")
	local name=$(GitHub.json-get "/app/name")
	if RAW || QUIET; then
		printf "$id"
	else
		printf "Token created: %s %-14s  %s\n" $token "(id: $id)" "${note:-$name}"
	fi
}

GitHub.token-delete() {
    GitHub.get-args id
	[ -z "$id" ] && die "Command requires token id"
	basic_auth="1"
	GitHub.api-delete "/authorizations/$id"
	message_success="Token '$id' deleted"
}

GitHub.scope-list() {
	GitHub.get-args id
	GitHub.require-value token-id "$id"
	basic_auth="1"
	GitHub.api-get "/authorizations/$id"
}

GitHub.success-scope-list() {
	local i=0
	local scopes scope
	while true; do
		scope=$(GitHub.json-get "/scopes/$i")
		[ -z "$scope" ] && break
		scopes+=($scope)
		let i=i+1
	done

	if RAW; then
		for scope in "${scopes[@]}"; do
			echo "$scope"
		done
		return
	fi

	echo
	echo "The current scopes for token-id:$token_id are:"
	echo "  ${scopes[*]}"
	cat <<eos

Available scopes are:
  user          Read/write access to profile info only.
  user:email    Read access to a user’s email addresses.
  user:follow   Access to follow or unfollow other users.
  public_repo   Read/write access to public repos and organizations.
  repo          Read/write access to public and private repos and orgs.
  repo:status   Read/write access to public and private repo commit statuses.
  delete_repo   Delete access to adminable repositories.
  notifications Read access to a user’s notifications.
  gist          Write access to gists.

For more info, see: http://developer.github.com/v3/oauth/#scopes
eos
}

GitHub.scope-add() {
    if ALL; then
		GitHub.get-args id
		# XXX Dedup this array in GitHub.scope-remove
		scopes=(
			user user:email user:follow
			public_repo repo repo:status delete_repo
			notifications gist
		)
	else
		GitHub.get-args id *scopes
	fi
	GitHub.require-value token-id "$id"
	GitHub.check-token-id "$id"
	basic_auth="1"
	local array=$(GitHub.json-dump-array ${scopes[*]})
	local json=$(GitHub.json-dump-object add_scopes "$array")
	GitHub.api-patch "/authorizations/$id" "$json"
	message_success="Scopes added."
}

GitHub.scope-remove() {
    if ALL; then
		GitHub.get-args id
		scopes=(
			user user:email user:follow
			public_repo repo repo:status delete_repo
			notifications gist
		)
	else
		GitHub.get-args id *scopes
	fi
	GitHub.require-value token-id "$id"
	basic_auth="1"
	local array=$(GitHub.json-dump-array ${scopes[*]})
	local json=$(GitHub.json-dump-object remove_scopes "$array")
	GitHub.api-patch "/authorizations/$id" "$json"
	message_success="Scopes removed"
}

GitHub.user() {
    GitHub.get-args user
	GitHub.fetch-value user-name "$user"
	: ${user_name:=$login}
	GitHub.api-get "/users/$user_name"
}

GitHub.success-user() {
	for field in \
		login type name email blog location company bio \
		followers following public_repos public_gists
	do
		GitHub.report-value $field
	done
}

GitHub.user-edit() {
	GitHub.require-value api-token "$token"
	GitHub.get-args *key_value_pairs
	GitHub.api-patch "/user" "$(GitHub.json-dump-object-pairs)"
}

GitHub.orgs() {
    GitHub.get-args user
	GitHub.fetch-value user-name "$user"
	: ${user_name:=$login}

	GitHub.report-list \
		"/users/$user_name/orgs" \
		'login'
}

GitHub.org() {
	GitHub.get-args org
	GitHub.require-value org-name "$org"
	GitHub.api-get "/orgs/$org_name"
}

GitHub.success-org() {
	for field in \
		login type name billing_email email blog location company \
		html_url public_repos public
	do
		GitHub.report-value $field
	done
}

GitHub.org-edit() {
	GitHub.require-value api-token "$token"
	GitHub.get-args org *key_value_pairs
	GitHub.require-value org-name "$org"
	GitHub.api-patch "/orgs/$org_name" "$(GitHub.json-dump-object-pairs)"
}

GitHub.members() {
    GitHub.get-args org
	GitHub.require-value org-name "$org"

	GitHub.report-list \
		"/orgs/$org_name/members" \
		'login'
}

GitHub.teams() {
	GitHub.require-value api-token "$token"
    GitHub.get-args org
	GitHub.require-value org-name "$org"

	GitHub.report-list \
		"/orgs/$org_name/teams" \
		'name'
}

GitHub.repos() {
    GitHub.get-args owner
	GitHub.fetch-value owner-name "$owner"
	: ${owner_name:=$login}

	GitHub.report-list \
		"/users/$owner_name/repos?sort=pushed;per_page=PER_PAGE" \
		'pushed_at full_name description'
}

GitHub.format-repos-entry() {
	if RAW; then
		printf "$3\n"
	else
		printf "%d) (%s)  %-30s %s\n" $1 ${2/T*} $3 "$4"
	fi
}

GitHub.repo() {
	GitHub.get-args repo
	GitHub.check-owner-repo "$repo"
	GitHub.require-value repo-name "$repo"
	GitHub.require-value owner-name "${owner:-$login}"
	GitHub.api-get "/repos/$owner_name/$repo_name"
}

GitHub.success-repo() {
	for field in \
		full_name description homepage language \
		pushed_at \
		html_url ssh_url \
		forks parent__full_name source__full_name \
		watchers open_issues
	do
		GitHub.report-value $field
	done
}

GitHub.repo-edit() {
	GitHub.get-args owner-repo *key_value_pairs
	GitHub.require-value repo-name "$repo"
	GitHub.require-value owner-name "$owner"
	GitHub.require-value api-token "$token"
	key_value_pairs+=(name "$repo_name")
	GitHub.api-patch "/repos/$owner_name/$repo_name" "$(GitHub.json-dump-object-pairs)"
}

# TODO Support creating repo under an org
GitHub.repo-create() {
	GitHub.get-args repo
	GitHub.require-value repo-name "$repo"
	GitHub.require-value api-token "$token"
	GitHub.api-post "/user/repos" $(GitHub.json-dump-object 'name' $repo_name)
	message_success="Repository '$repo_name' created."
	message_422="Repository name '$repo_name' already exists."
}

GitHub.repo-delete() {
	GitHub.get-args owner-repo
	GitHub.require-value delete-repo-name "$repo"
	GitHub.require-value delete-owner-name "$owner"
	GitHub.require-value api-token "$token"
	GitHub.api-delete "/repos/$delete_owner_name/$delete_repo_name"
	message_success="Repository '$delete_owner_name/$delete_repo_name' deleted"
}

GitHub.forks() {
	GitHub.get-args repo
	GitHub.check-owner-repo "$repo"
	GitHub.require-value repo-name "$repo"
	GitHub.require-value owner-name "${owner:-$login}"

	GitHub.report-list \
		"/repos/$owner_name/$repo_name/forks?sort=newest;per_page=PER_PAGE" \
		'pushed_at full_name'
}

GitHub.format-forks-entry() {
	if RAW; then
		printf "$3\n"
	else
		printf "%d) (%s)  %-30s\n" $1 ${2/T*/} $3
	fi
}

GitHub.fork() {
	GitHub.get-args owner-repo org
	GitHub.require-value repo-name "$repo"
	GitHub.require-value owner-name "$owner"
	GitHub.require-value api-token "$token"
	GitHub.api-post "/repos/$owner_name/$repo_name/forks" '{}'
}

GitHub.stars() {
	GitHub.get-args repo
	GitHub.check-owner-repo "$repo"
	GitHub.require-value repo-name "$repo"
	GitHub.require-value owner-name "${owner:-$login}"
	GitHub.report-list \
		"/repos/$owner_name/$repo_name/stargazers?per_page=PER_PAGE" \
		'login'
}

GitHub.star() {
	GitHub.get-args repo
	GitHub.check-owner-repo "$repo"
	GitHub.require-value repo-name "$repo"
	GitHub.require-value owner-name "${owner:-$login}"
	GitHub.require-value api-token "$token"
	GitHub.api-put "/user/starred/$owner_name/$repo_name"
	message_success="'$owner_name/$repo_name' starred"
}

GitHub.unstar() {
	GitHub.get-args repo
	GitHub.check-owner-repo "$repo"
	GitHub.require-value repo-name "$repo"
	GitHub.require-value owner-name "${owner:-$login}"
	GitHub.require-value api-token "$token"
	GitHub.api-delete "/user/starred/$owner_name/$repo_name"
	message_success="'$owner_name/$repo_name' unstarred"
}

GitHub.starred() {
	GitHub.get-args user
	GitHub.require-value user-name "${user:-$login}"
	GitHub.report-list \
		"/users/$user_name/starred?sort=updated;per_page=PER_PAGE" \
		'full_name'
}

GitHub.collabs() {
	GitHub.get-args repo
	GitHub.check-owner-repo "$repo"
	GitHub.require-value repo-name "$repo"
	GitHub.require-value owner-name "${owner:-$login}"
	GitHub.report-list \
		"/repos/$owner_name/$repo_name/collaborators" \
		'login'
}

GitHub.trust() {
	GitHub.get-args owner-repo *collaborators
	GitHub.require-value repo-name "$repo"
	GitHub.require-value owner-name "$owner"
	GitHub.require-value api-token "$token"
	for collab_name in ${collaborators[@]}; do
		GitHub.api-put "/repos/$owner_name/$repo_name/collaborators/$collab_name"
	done
}

GitHub.untrust() {
	GitHub.get-args owner-repo *collaborators
	GitHub.require-value repo-name "$repo"
	GitHub.require-value owner-name "$owner"
	GitHub.require-value api-token "$token"
	for collab_name in ${collaborators[@]}; do
		GitHub.api-delete "/repos/$owner_name/$repo_name/collaborators/$collab_name"
	done
}

GitHub.followers() {
	GitHub.get-args user
	GitHub.require-value user-name "${user:-$login}"
	GitHub.report-list \
		"/users/$user_name/followers?per_page=PER_PAGE" \
		'login'
}

GitHub.following() {
	GitHub.get-args user
	GitHub.require-value user-name "${user:-$login}"
	GitHub.report-list \
		"/users/$user_name/following?per_page=PER_PAGE" \
		'login'
}

GitHub.follow() {
	GitHub.get-args user
	GitHub.require-value user-name "$user"
	GitHub.require-value api-token "$token"
	GitHub.api-put "/user/following/$user_name"
}

GitHub.unfollow() {
	GitHub.get-args user
	GitHub.require-value user-name "$user"
	GitHub.require-value api-token "$token"
	GitHub.api-delete "/user/following/$user_name"
}

#------------------------------------------------------------------------------
# API calling functions:
#------------------------------------------------------------------------------
GitHub.api-get() { GitHub.api-call GET "$1" "$2"; }
GitHub.api-post() { GitHub.api-call POST "$1" "$2"; }
GitHub.api-put() { GitHub.api-call PUT "$1" "$2"; }
GitHub.api-patch() { GitHub.api-call PATCH "$1" "$2"; }
GitHub.api-delete() { GitHub.api-call DELETE "$1" "$2"; }

# Build a command to make the HTTP call to the API server, make the call, and
# check the result.
GitHub.api-call() {
	GitHub.format-curl-command "$@"
	[ -n "$GIT_HUB_TEST_COMMAND" ] && return

	if VERBOSE; then
		if [ -n "$show_token" ]; then
			say "${curl_command[@]}"
		else
			say "${curl_command[@]/$api_token/********}"
		fi
	fi

	[ -n "$dry_run" ] && {
		say '*** NOTE: This is a dry run only. ***'
		exit 0
	}

	if [ -z "$repeat_command" ]; then
		# Run the curl command!
		set +e #; set -x  # for debugging the real command
		"${curl_command[@]}"
		rc=$?
		set -e #; set +x  # for debugging the real command
	else
		# Use last command run results.
		rc=0
	fi

	[ -n "$show_headers" ] && cat $GIT_HUB_HEADER
	[ -n "$show_output" ] && cat $GIT_HUB_OUTPUT
	[ -s $GIT_HUB_OUTPUT ] && GitHub.json-load-cache "$(< $GIT_HUB_OUTPUT)"
	[ -n "$json_prune_regex" ] && GitHub.json-prune-cache "$json_prune_regex"
	[ -n "$show_json" ] && echo "$json_load_data_cache"

	GitHub.check-api-call-status $rc

	true
}

# Build curl command in an global array. This is the only way to preserve
# quoted whitespace.
GitHub.format-curl-command() {
	local action=$1
	local url=$2
	local data=$3

	GitHub.fetch-value use-auth
	[ -z "$GIT_HUB_TEST_COMMAND" ] &&
		[ -n "$use_auth" ] &&
		GitHub.require-value api-token "$token"

	user_agent=git-hub-$GIT_HUB_VERSION
	# Cheap trick to make github pretty-print the JSON output.
	[ -n "$show_output" ] && user_agent="curl-$user_agent"

	[[ "$url" =~ ^https?: ]] || url="$GIT_HUB_API_URI$url"

	curl_command=(
		curl
			--request $action
		$url
	)
	[ -n "$data" ] || [ "$action" = "PUT" ] && curl_command+=(-d "$data")
	if [ -n "$basic_auth" ]; then
		if [ -n "$GIT_HUB_PASSWORD" ]; then
			curl_command+=(-u "$login:$GIT_HUB_PASSWORD")
		else
			curl_command+=(-u "$login")
		fi
	elif [ -n "$api_token" ]; then
		curl_command+=(--header "Authorization: token $api_token")
	fi
	[ -n "$GIT_HUB_TEST_COMMAND" ] && return
	curl_command+=(
		--user-agent $user_agent
		--dump-header $GIT_HUB_HEADER
		--output $GIT_HUB_OUTPUT
		--stderr $GIT_HUB_ERROR
		--silent
		--show-error
	)
}

GitHub.check-api-call-status() {
	OK=$1
	if [ ! -f $GIT_HUB_HEADER ]; then
		ERROR=$(head -1 $GIT_HUB_ERROR)
		return
	fi
	status_code=$(head -1 $GIT_HUB_HEADER | cut -d ' ' -f2)
	[[ $status_code =~ ^[0-9]{3}$ ]] || return
	case "$status_code" in
		200|201|202|204)
			OK=0
			;;
		403)
			OK=1
			ERROR=$(GitHub.json-get '/message')
			local regex='rate limit exceeded'
			if [[ "$ERROR" =~ "$regex" ]]; then
				ERROR="$ERROR Try the --use-auth option."
			fi
			ERROR=$(echo "$ERROR" | fmt)
			;;
		*)
			OK=1
			ERROR=$(head -1 $GIT_HUB_HEADER | cut -d ' ' -f3-)
			;;
	esac
}

OK() { return $OK; }
RAW() { [ -n "$GIT_HUB_RAW" ] && return 0 || return 1; }
QUIET() { [ -n "$GIT_QUIET" ] && return 0 || return 1; }
VERBOSE() { [ -n "$GIT_HUB_VERBOSE" ] && return 0 || return 1; }
ALL() { [ -n "$GIT_HUB_ALL" ] && return 0 || return 1; }

#------------------------------------------------------------------------------
# Argument parsing functions:
#------------------------------------------------------------------------------
GitHub.get-args() {
	local last=${!#}
	local slurp_index=0
	if [[ "$1" = "owner-repo" ]]; then
		if [[ "${command_arguments[0]}" =~ / ]]; then
			GitHub.check-owner-repo ${command_arguments[0]}
			unset command_arguments[0]
		fi
		shift
	fi
	for arg in "${command_arguments[@]}"; do
		if [ $slurp_index -gt 0 ]; then
			eval $slurp_name[\$slurp_index]=\"\$arg\"
			let slurp_index=slurp_index+1
		elif [ $# -gt 0 ]; then
			if [[ "$1" =~ ^\* ]]; then
				local slurp_name=${1/\*/}
				eval $slurp_name[\$slurp_index]=\"\$arg\"
				let slurp_index=slurp_index+1
			else
				eval $1=\""$arg"\"
				shift
			fi
		else
			die "Unknown argument: $arg"
		fi
	done
	if [ "$last" = "*key_value_pairs" ]; then
		if [ "${#key_value_pairs[@]}" -eq 0 ]; then
			die "Command needs key/value pairs, but none given"
		elif [ $(( ${#key_value_pairs[@]} % 2)) -eq 1 ]; then
			die "Odd number of items for key/value pairs"
		fi
	fi
}

GitHub.check-owner-repo() {
	[[ $1 =~ / ]] && GitHub.owner-repo ${1/\// }
	true
}

GitHub.owner-repo() {
	owner=$1
	repo=$2
}

# Usage: GitHub.require-value variable-name "possible-user-value"
#   Fetch $variable_name or die
GitHub.require-value() {
	local key=$1
	local var=${key//-/_}
	GitHub.fetch-value "$@"
	if [ -z "$(eval echo \$$var)" ]; then
		[ "$var" = "api_token" ] && GitHub.die_need_api_token
		die "Can't find value for '$var'"
	fi
	true
}

# Usage: GitHub.fetch-value variable-name "possible-user-value"
#   Sets $variable_name to the first of:
#   - possible-user-value
#   - $GIT_HUB_VARIABLE_NAME
#   - git config github.variable-name
GitHub.fetch-value() {
	local key=$1
	local var=${key//-/_}
	local env=GIT_HUB_$(echo $var | tr 'a-z' 'A-Z')

	[ -n "$(eval echo \$$var)" ] && return
	eval $var="$2"
	[ -n "$(eval echo \$$var)" ] && return
	eval $var=\"\$$env\"
	[ -n "$(eval echo \$$var)" ] && return
	# XXX get .git dir from git's api (anywhere in the repo)
	local git_dir=${GIT_DIR:-.git}
	if [ "$var" = "repo_name" -o \
		 "$var" = "owner_name" -o \
		 "$var" = "user_name" ]; then
		if [ -f "$git_dir/config" ]; then
			# XXX don't require 'origin' remote name
			url=$(git config --file=$git_dir/config remote.origin.url)
			if [ -n "$url" ]; then
				local re1='github\.com'
				if [[ "$url" =~ $re1 ]]; then
					local re2='^.*[:/](.*)/(.*)\.git$'
					if [[ "$url" =~ $re2 ]]; then
						: ${owner_name:="${BASH_REMATCH[1]}"}
						: ${user_name:="${BASH_REMATCH[1]}"}
						: ${repo_name:="${BASH_REMATCH[2]}"}
						return
					fi
				fi
			fi
		fi
	fi
	eval $var=$(git config --file=$config_file github.$key || echo '')
	[ -n "$(eval echo \$$var)" ] && return
	true
}

GitHub.check-token-id() {
	local id="$1"
	[ ${#id} -eq 40 ] &&
		die "'$command' requires a *token-id*, not a *token-value*."
	local regex='^[0-9]+$'
	[[ "$id" =~ $regex ]] ||
		die "'$id' is invalid token-id. Must be an integer value."
	true
}

#------------------------------------------------------------------------------
# List processing functions:
#------------------------------------------------------------------------------
GitHub.report-list() {
	message_success=0
	local url="$1" fields=($2) ii
 	local list_max=${list_size:-${3:-$(($(tput lines) - 3))}}
	local per_page=${4:-100}
	[ $per_page -gt $list_max ] && per_page=$list_max
	url=${url/PER_PAGE/$per_page}
	local list_counter=1
	while true; do
		GitHub.api-get $url
		[ -n "$GIT_HUB_TEST_COMMAND" ] && return
		GitHub.json-prune-list "${fields[@]}"
		local page_size=$(echo "$json_load_data_cache" | cut -d '/' -f2 | tail -1)
		for ((ii = 0; ii <= page_size && list_counter <= list_max; ii++)); do
			local -a values=()
			for field in "${fields[@]}"; do
				value="$(GitHub.json-get "/$ii/$field")"
				values+=("$value")
			done
			if GitHub.callable "GitHub.format-$command-entry"; then
				"GitHub.format-$command-entry" $list_counter "${values[@]}"
			else
				GitHub.default-format-entry $list_counter "${values[@]}"
			fi
			let list_counter=list_counter+1
		done
		url=$(GitHub.get-next-page-url)
		if [ $list_counter -gt $list_max ]; then
			if [ -n "$url" -o $ii -lt $page_size ]; then
				if ! QUIET; then
					echo --More--
				fi
			fi
			break
		fi
		[ -z "$url" ] && break
	done
}

GitHub.get-next-page-url() {
	local regexp='Link: <(https:.+?)>; rel="next"'
	[[ "$(< $GIT_HUB_HEADER)" =~ $regexp ]] &&
		echo "${BASH_REMATCH[1]}"
	true
}

GitHub.default-format-entry() {
	if RAW; then
		printf "$2\n"
	else
		printf "%d) %s\n" $1 $2
	fi
}

#------------------------------------------------------------------------------
# Detailed error messages:
#------------------------------------------------------------------------------
GitHub.die_need_api_token() {
	cat <<eos

Can't determine your Personal API Access Token, which is required by this
command. Usually you put your token into the ~/.githubconfig file, like this:

	git hub config api-token <your-personal-api-access-token>

You can also specify the token using the --token= commandline option, or via
the GIT_HUB_API_TOKEN environment variable.

To list your API tokens:

	git hub token-list

To create a new api token:

	git hub token-create "my git-hub token"
	# You should probably add at least the 'repo' and 'user' scopes:
	git hub scope-add <token-id> repo user

eos
	die
}

GitHub.die_config_not_setup() {
	cat <<eos

To use the 'git hub' command, you need a '~/.githubconfig' file, and it needs
to contain at least your login id. You can set this by running the following
command:

	git hub config login <your-github-login-id>

eos
	die
}

GitHub.die_user_name_in_config() {
	cat <<eos

It looks like your ~/.githubconfig has a 'user-name' key in it. This key has
been renamed 'login'. You need to fix the config file. Please run these
commands:

	git hub config-unset user-name
	git hub config login <your-github-login-id>

eos
	die
}

#------------------------------------------------------------------------------
# JSON support functions:
#------------------------------------------------------------------------------
# Format a JSON object from an input list of key/value pairs.
GitHub.json-dump-object() {
	local json='{'
	local regex='(^\[|^null$|^[0-9]+$)'
	while [ $# -gt 0 ]; do
		if [[ "$2" =~ $regex ]]; then
			json="$json\"$1\":$2"
		else
			json="$json\"$1\":\"$2\""
		fi
		shift; shift
		if [ $# -gt 0 ]; then
			json="$json,"
		fi
	done
	json="$json}"
	echo $json
}

GitHub.json-dump-array() {
	local json='['
	while [ $# -gt 0 ]; do
		json="$json\"$1\""
		shift
		if [ $# -gt 0 ]; then
			json="$json,"
		fi
	done
	json="$json]"
	echo "$json"
}

# Format a JSON object from an array.
GitHub.json-dump-object-pairs() {
	local regex='(^\[|^null$|^[0-9]+$)'
	local json='{'
	for ((i = 0; i < ${#key_value_pairs[@]}; i = i+2)); do
		local value="${key_value_pairs[$((i+1))]}"
		value=${value//\"/\\\"}
		if [[ "$value" =~ $regex ]]; then
			json="$json\"${key_value_pairs[$i]}\":$value"
		else
			json="$json\"${key_value_pairs[$i]}\":\"$value\""
		fi
		if [ $((${#key_value_pairs[@]} - $i)) -gt 2 ]; then
			json="$json,"
		fi
	done
	json="$json}"
	echo $json
}

GitHub.json-load-cache() {
	JSON.load "$1" json_load_data_cache
}

GitHub.json-prune-cache() {
	json_load_data_cache=$(echo "$json_load_data_cache" | grep -E "$1")
}

GitHub.json-prune-list() {
	local fields="$@"
	GitHub.json-prune-cache "^/[0-9]+/(${fields// /|})\b"
}

GitHub.json-get() {
	local key="^$1[[:space:]]"
	local data="$2"
	[ -z "$data" ] && data="$json_load_data_cache"
	value=$(echo "$data" | grep -E --max-count=1 "$key" | cut -f2)
	if [ "$value" = 'null' ]; then
		echo ''
	elif [[ "$value" =~ ^\" ]]; then
		value=${value#\"}
		value=${value%\"}
		value=${value//\\\"/\"}
		echo "$value"
	else
		echo "$value"
	fi
}

#------------------------------------------------------------------------------
# Report formatting functions:
#------------------------------------------------------------------------------
GitHub.report-value() {
    local key=${1//__/\/}
	local value=$(GitHub.json-get "/$key")
	local label="$key"
	if ! RAW; then
		label=$(eval echo \$label_$1)
		if [ -z "$label" ]; then
			label=$(echo "$1" | tr '_' ' ')
			label=$(
				for word in $label; do
					title=`echo "${word:0:1}" | tr a-z A-Z`${word:1}
					echo -n "$title "
				done
			)
		fi
	fi
	if [ -n "$label" -a -n "$value" ]; then
		if [ ${#value} -lt 80 ]; then
			printf "%-15s %s\n" "$label" "$value"
		else
			value=${value//\\r\\n\\r\\n/\\n\\n  }
			printf "$label\n"
			printf "  $value" | fmt
		fi
	fi
}

label_blog='Web Site'
label_watchers='Stars'
label_homepage='Web Site'
label_html_url='GitHub Page'
label_ssh_url='Remote URL'
label_parent__full_name='Forked From'
label_source__full_name='Fork Parent'

#------------------------------------------------------------------------------
# Initial setup functions:
#------------------------------------------------------------------------------
GitHub.assert-env() {
	GIT_EXEC_PATH=$(git --exec-path) || exit $?
	GIT_HUB_EXEC_PATH=$GIT_EXEC_PATH
	[ -n "$GIT_HUB_TEST_MODE" ] &&
		GIT_HUB_EXEC_PATH=$PWD/lib
	# We source this twice. Now get say and die. Later to parse options.
	OPTIONS_SPEC= NONGIT_OK=1 source "$GIT_EXEC_PATH/git-sh-setup"

	: ${GIT_HUB_API_URI:=https://api.github.com}
	: ${GIT_HUB_TMP_DIR:=/tmp}
	GIT_HUB_TMP_PREFIX=$GIT_HUB_TMP_DIR/git-hub
	GIT_HUB_INPUT=$GIT_HUB_TMP_PREFIX-in-$$
	GIT_HUB_OUTPUT=$GIT_HUB_TMP_PREFIX-out-$$
	GIT_HUB_ERROR=$GIT_HUB_TMP_PREFIX-err-$$
	GIT_HUB_HEADER=$GIT_HUB_TMP_PREFIX-head-$$

	local cmd
	for cmd in curl cut git grep head tr; do
		[ -z "$(type $cmd) > /dev/null" ] &&
			echo "Required shell command not found: '$cmd'" && exit 1
	done

	[ -z "$HOME" ] &&
		echo "Cannot determine HOME directory" && exit 1
	config_file=${GIT_HUB_CONFIG:-$HOME/.githubconfig}
}

GitHub.get-options() {
	[ $# -eq 0 ] && set -- --help
	NONGIT_OK=1 source "$GIT_EXEC_PATH/git-sh-setup"

	GitHub.unset-global-variables
	while [ $# -gt 0 ]; do
		local option="$1"; shift
		case "$option" in
			--token) token="$1"; shift ;;
			-c)	list_size=$1; shift ;;
			-a) GIT_HUB_ALL="1"
				list_size=999999
				;;
			-A) use_auth="1" ;;

			-h) usage ;;
			-r) GIT_HUB_RAW="1" ;;
			-q) GIT_QUIET="1" ;;
			-v) GIT_HUB_VERBOSE="1" ;;
			-d) dry_run="1" ;;
			-T) show_token="1"
				GIT_HUB_VERBOSE="1"
				GIT_QUIET=
				;;

			--) break ;;

			# Dev options:
			-O) show_output="1" ;;
			-H) show_headers="1" ;;
			-J) show_json="1" ;;
			-x) set -x ;;
			-R) repeat_command="1" ;;

			*) die "Unexpected option: $option" ;;
		esac
	done

    command="$1"; shift
	command_arguments=("$@")

	# Command aliases:
	[ "$command" = "create" ] && command="repo-create"

    [ "$command" = "config" -o "$command" = "config-unset" ] || GitHub.check_config

	true
}

GitHub.unset-global-variables() {
	command=
	command_arguments=
	user=
	user_name=
	org=
	org_name=
	owner=
	owner_name=
	repo=
	repo_name=
	token=
	api_token=
	key_value_pairs=()
	list_size=
	GIT_QUIET=
	GIT_HUB_VERBOSE=
	show_token=
	dry_run=
	repeat_command=
	show_output=
	show_headers=
	show_json=
	list_complete=
	more_message_printed=
}

GitHub.setup-env() {
    source "$GIT_HUB_EXEC_PATH/git-hub./json.bash"
    if [ -n "$repeat_command" ]; then
		[ -f $GIT_HUB_TMP_PREFIX-out-* ] ||
			die "No previous 'git hub' command to repeat"
		local old_output=$(echo $GIT_HUB_TMP_PREFIX-out-*)
		local pid=${old_output/$GIT_HUB_TMP_PREFIX-out-/}
		GIT_HUB_INPUT=$GIT_HUB_TMP_PREFIX-in-$pid
		GIT_HUB_OUTPUT=$GIT_HUB_TMP_PREFIX-out-$pid
		GIT_HUB_ERROR=$GIT_HUB_TMP_PREFIX-err-$pid
		GIT_HUB_HEADER=$GIT_HUB_TMP_PREFIX-head-$pid
	else
		rm -f $GIT_HUB_TMP_PREFIX-*
	fi
}

GitHub.check_config() {
	[ -f "$config_file" ] || GitHub.die_config_not_setup
	[ -n "$(git config -f $config_file github.user-name)" ] &&
		GitHub.die_user_name_in_config
	login="$(git config -f $config_file github.login)"
	[ -n "$login" ] || GitHub.die_config_not_setup
}

#------------------------------------------------------------------------------
# General purpose functions:
#------------------------------------------------------------------------------

# Check if a function exists:
GitHub.callable() {
	[ -n "$(type $1 2> /dev/null)" ]
}

# This command is provided by `git-sh-setup` but is missing in older versions
# of git.  Repeating it here for now:
say() {
	if test -z "$GIT_QUIET"
	then
		printf '%s\n' "$*"
	fi
}

#------------------------------------------------------------------------------
# Begin at the end!
#------------------------------------------------------------------------------
[ -n "$GIT_HUB_TEST_MODE" ] || GitHub.main "$@"

# vim: set tabstop=4 shiftwidth=4 noexpandtab:

.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IO::FILE=IO(0XC62020) 1"
.TH IO::FILE=IO(0XC62020) 1 "2015-08-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Name"
.IX Header "Name"
git-hub \- The Git command for GitHub
.SH "Synopsis"
.IX Header "Synopsis"
Here are just a few of the things you can do on GitHub with a simple command:
.PP
.Vb 3
\&    git hub                             # Show the \`git hub\` cheat sheet
\&    git hub help                        # Show this awesome documentation
\&    git hub setup                       # Config dialog. Do this first!
\&
\&    git hub user <user>                 # Get info about a user
\&    git hub repos <owner>               # List recent repositories
\&    git hub repo\-new <repo>             # Create a new repository
\&    git hub fork <owner>/<repo>         # Fork a repository
\&    git hub clone <owner>/<repo>        # Clone a GitHub repository
\&                                        # Set/Change your repo description
\&    git hub repo\-edit <repo> description \*(AqJust another GitHub repo\*(Aq
\&    git hub repo\-delete <owner>/<repo>  # Delete a repository
\&    git hub followers <user>            # List a user\*(Aqs followers
\&    git hub star ingydotnet/git\-hub     # Star this repository
\&    git hub watch ingydotnet/git\-hub    # Watch this repository
\&    git hub follow ingydotnet           # Follow this author
\&    git hub trust ingydotnet            # Add collaborators to repo
\&                                        # Stalk all your followers
\&    git hub followers \-ra | git hub user \-
\&    git hub gists <user>                # List gists for a user
.Ve
.SH "Description"
.IX Header "Description"
The \fBhub\fR subcommand for git, allows you to perform many of the operations made available by GitHub's v3 \s-1REST API,\s0 from the \f(CW\*(C`git\*(C'\fR commandline command.
.PP
You can fork, create, delete and modify repositories. You can get information about users, repositories and issues. You can \fBstar\fR, \fBwatch\fR and \fBfollow\fR things, and find out who else is doing the same. The \s-1API\s0 is quite extensive. With this command you can do many of your day to day GitHub actions without needing a web browser.
.PP
You can also chain commands together using the output of one as the input of another. For example you could use this technique to clone all the repos of a GitHub user or organization, with one command. See \s-1PIPE AND EACH\s0 below.
.SH "Installation"
.IX Header "Installation"
There are currently 3 ways to install \f(CW\*(C`git\-hub\*(C'\fR. For all of them you need to get the source code from GitHub:
.PP
.Vb 1
\&    git clone https://github.com/ingydotnet/git\-hub /path/to/git\-hub
.Ve
.PP
The first installation method is preferred: \f(CW\*(C`source\*(C'\fR the \f(CW\*(C`init\*(C'\fR file. Just add a line like this one to your shell startup script:
.PP
.Vb 1
\&    source /path/to/git\-hub/init
.Ve
.PP
That will modify your \f(CW\*(C`PATH\*(C'\fR and \f(CW\*(C`MANPATH\*(C'\fR, and also enable command completion.
.PP
The second method is to do these things by hand. This might afford you more control of your shell environment. Simply add the \f(CW\*(C`lib\*(C'\fR and \f(CW\*(C`man\*(C'\fR directories to your \f(CW\*(C`PATH\*(C'\fR and \f(CW\*(C`MANPATH\*(C'\fR:
.PP
.Vb 2
\&    export PATH="/path/to/git\-hub/lib:$PATH"
\&    export MANPATH="/path/to/git\-hub/man:$MANPATH"
.Ve
.PP
See below for info on how to turn on Command Completion.
.PP
The third method is a standard system install, which puts \f(CW\*(C`git\-hub\*(C'\fR next to your other git commands, do this instead:
.PP
.Vb 1
\&    make install        # Possibly with \*(Aqsudo\*(Aq
.Ve
.PP
This method does not account for upgrading and command completion yet.
.PP
See \*(L"Upgrading\*(R" and \*(L"Command Completion\*(R" below.
.SH "Command Options"
.IX Header "Command Options"
Commandline options start with a dash and can appear in any order in the command. Long form commands that require an argument can use '=' or not:
.PP
.Vb 2
\&    \-\-count=5
\&    \-\-count 5
.Ve
.ie n .IP """\-c <number>"", ""count=<number>""" 4
.el .IP "\f(CW\-c <number>\fR, \f(CWcount=<number>\fR" 4
.IX Item "-c <number>, count=<number>"
This option is for commands that return a list of things. Specify the number of items you want the command to return. Each list command has a reasonable default value.
.ie n .IP """\-a"", ""\-\-all""" 4
.el .IP "\f(CW\-a\fR, \f(CW\-\-all\fR" 4
.IX Item "-a, --all"
Show all elements for list commands. Also applies to a few other commands as documented.
.ie n .IP """\-r"", ""\-\-raw""" 4
.el .IP "\f(CW\-r\fR, \f(CW\-\-raw\fR" 4
.IX Item "-r, --raw"
For commands the produce lists, just list the raw data. For commands that produce reports, show the raw storage keys, rather than the human friendly ones. You will need the raw keys to edit/change values.
.ie n .IP """\-j"", ""\-\-json""" 4
.el .IP "\f(CW\-j\fR, \f(CW\-\-json\fR" 4
.IX Item "-j, --json"
For some commands, you can get the raw data in \s-1JSON.\s0
.ie n .IP """\-""" 4
.el .IP "\f(CW\-\fR" 4
.IX Item "-"
This option, just a single '\-', is small but very powerful. It means to read the next line from stdin, and put the content into the command at that point. See \s-1PIPE\s0 and \s-1EACH\s0 below.
.ie n .IP """=""" 4
.el .IP "\f(CW=\fR" 4
.IX Item "="
Like the '\-'Â command above, but reads each \fBword\fR from stdin.
.ie n .IP """\-h""" 4
.el .IP "\f(CW\-h\fR" 4
.IX Item "-h"
Show the brief command usage.
.ie n .IP """\-\-help""" 4
.el .IP "\f(CW\-\-help\fR" 4
.IX Item "--help"
Show the full documentation.
.ie n .IP """\-q"", ""\-\-quiet""" 4
.el .IP "\f(CW\-q\fR, \f(CW\-\-quiet\fR" 4
.IX Item "-q, --quiet"
Show minimal output.
.ie n .IP """\-v"", ""\-\-verbose""" 4
.el .IP "\f(CW\-v\fR, \f(CW\-\-verbose\fR" 4
.IX Item "-v, --verbose"
Show detailed output. Notably, show the raw command that is used for the GitHub \s-1API\s0 calls.
.ie n .IP """\-\-token=<api\-token>""" 4
.el .IP "\f(CW\-\-token=<api\-token>\fR" 4
.IX Item "--token=<api-token>"
Set or override the api-token required by the command. This value can also come from the \f(CW\*(C`GIT_HUB_API_TOKEN\*(C'\fR environment variable. Usually this value comes from your \f(CW\*(C`~/.git\-hub/config\*(C'\fR file.
.ie n .IP """\-d"" ""\-\-dryrun""" 4
.el .IP "\f(CW\-d\fR \f(CW\-\-dryrun\fR" 4
.IX Item "-d --dryrun"
Don't actually make the \s-1API\s0 call. This option turns on verbose mode.
.ie n .IP """\-T""" 4
.el .IP "\f(CW\-T\fR" 4
.IX Item "-T"
Show the \s-1API\s0 token in the verbose output. Hidden by default. This option turns on verbose mode.
.ie n .IP """\-A"", ""\-\-use\-auth""" 4
.el .IP "\f(CW\-A\fR, \f(CW\-\-use\-auth\fR" 4
.IX Item "-A, --use-auth"
Use authentication whether or not it is needed for a certain command. This is useful if you have exceeded your hourly GitHub \s-1API\s0 rate limit, which is 60 calls unauthenticated, and 5000 calls authenticated.
.ie n .IP """\-C"" ""\-\-no\-cache""" 4
.el .IP "\f(CW\-C\fR \f(CW\-\-no\-cache\fR" 4
.IX Item "-C --no-cache"
There are currently known bugs in GitHub's cache headers. If the content seems stale, use this option.
.SS "Debug Options"
.IX Subsection "Debug Options"
There are a number of debug options that will give you lots of extra information (albeit in a less pretty format).
.ie n .IP """\-O""" 4
.el .IP "\f(CW\-O\fR" 4
.IX Item "-O"
Show the \s-1API\s0 reponse output. Always in \s-1JSON\s0 format. \s-1JSON\s0 is pretty-printed.
.ie n .IP """\-H""" 4
.el .IP "\f(CW\-H\fR" 4
.IX Item "-H"
Show the \s-1API\s0 response headers.
.ie n .IP """\-J""" 4
.el .IP "\f(CW\-J\fR" 4
.IX Item "-J"
Show the \s-1API\s0 response \s-1JSON,\s0 in decoded form.
.ie n .IP """\-R""" 4
.el .IP "\f(CW\-R\fR" 4
.IX Item "-R"
Repeat the last command, using the previous \s-1API\s0 server response. Useful for development and debugging. (Beware, only caches the most recent \s-1API\s0 call, so not really good for commands that make multiple calls).
.ie n .IP """\-x""" 4
.el .IP "\f(CW\-x\fR" 4
.IX Item "-x"
Turn on Bash \f(CW\*(C`\-x\*(C'\fR debugging. This will show every bash command executed in the program. This is extremely useful to track down nasty bugs.
.SH "Arguments"
.IX Header "Arguments"
The \f(CW\*(C`git hub\*(C'\fR command gets its input values from these sources (in this order):
.IP "\(bu" 4
Commandline \fBarguments\fR (see specific command, below).
.IP "\(bu" 4
Environment variables of the form \f(CW\*(C`GIT_HUB_VARIABLE_NAME\*(C'\fR.
.IP "\(bu" 4
The \f(CW\*(C`./.git/config\*(C'\fR file. (The repo you are issuing commands from)
.IP "\(bu" 4
The \f(CW\*(C`~/.git\-hub/config\*(C'\fR file.
.PP
Most of the commands described below have arguments. This section defines each of the argument types. Note that argument values that are strings containing whitespace need to be quoted.
.PP
Argument variable names are always indicated by angle brackets, like: \f(CW\*(C`<variable>\*(C'\fR. Arguments listed in square brackets are optional and arguments followed by \f(CW\*(C`...\*(C'\fR indicate that more than one is allowed.
.ie n .IP """<user>""" 4
.el .IP "\f(CW<user>\fR" 4
.IX Item "<user>"
A GitHub user name. Sometimes an organization name can be used instead. If this argument is optional, it defaults to the GitHub owner of the repo you are currently in. If you are not in a GitHub repo, it defaults to your login. \fBOverride\fR: \f(CW\*(C`GIT_HUB_USER_NAME\*(C'\fR environment variable.
.ie n .IP """<owner>""" 4
.el .IP "\f(CW<owner>\fR" 4
.IX Item "<owner>"
A GitHub user or organization that owns the repository being specified. This value defaults much like the \f(CW\*(C`<user>\*(C'\fR argument (above). \fBOverride\fR: \f(CW\*(C`GIT_HUB_OWNER_NAME\*(C'\fR environment variable.
.ie n .IP """<org>""" 4
.el .IP "\f(CW<org>\fR" 4
.IX Item "<org>"
A GitHub organization name. \fBOverride\fR: \f(CW\*(C`GIT_HUB_ORG_NAME\*(C'\fR environment variable.
.ie n .IP """<repo>""" 4
.el .IP "\f(CW<repo>\fR" 4
.IX Item "<repo>"
A GitHub repository name. If this argument is optional, it defaults to the GitHub repo name of the repo you are currently in. \fBOverride\fR: \f(CW\*(C`GIT_HUB_REPO_NAME\*(C'\fR environment variable.
.ie n .IP """<owner>/<repo>""" 4
.el .IP "\f(CW<owner>/<repo>\fR" 4
.IX Item "<owner>/<repo>"
Many commands need both an owner and repo separated by a slash. If the owner is you (your GitHub login) you can omit it (but you still need the leading slash). Like \f(CW\*(C`/myrepo\*(C'\fR, instead of \f(CW\*(C`me/myrepo\*(C'\fR. If this argument is optional, it defaults the the owner and repo of the GitHub repo you are in.
.ie n .IP """<key\-value\-pair>""" 4
.el .IP "\f(CW<key\-value\-pair>\fR" 4
.IX Item "<key-value-pair>"
Two strings separated by whitespace. Values with embedded whitespace should be quoted. The documentation of each command that needs these pairs, will list the valid keys.
.ie n .IP """<api\-token\-id>""" 4
.el .IP "\f(CW<api\-token\-id>\fR" 4
.IX Item "<api-token-id>"
The integer number \fBid\fR of a token (not the 40 hex-character value).
.ie n .IP """<scope\-name>""" 4
.el .IP "\f(CW<scope\-name>\fR" 4
.IX Item "<scope-name>"
One of the GitHub scopes that you can apply to a token. The \f(CW\*(C`git hub scopes\*(C'\fR command will tell you all of these, and what they mean.
.SH "Commands"
.IX Header "Commands"
These are the commands you can use to perform most of your daily GitHub interactions from the command line. They are installed by default.
.ie n .IP """help""" 4
.el .IP "\f(CWhelp\fR" 4
.IX Item "help"
Show this manpage.
.ie n .IP """version""" 4
.el .IP "\f(CWversion\fR" 4
.IX Item "version"
Print version info for \f(CW\*(C`git\-hub\*(C'\fR.
.ie n .IP """info""" 4
.el .IP "\f(CWinfo\fR" 4
.IX Item "info"
Show detailed version and environment info about your \f(CW\*(C`git\-hub\*(C'\fR installation. This can be useful for figuring out things about how \f(CW\*(C`git\-hub\*(C'\fR is operating in a given situation. Also good for reporting bugs / issues in \f(CW\*(C`git\-hub\*(C'\fR.
.ie n .IP """setup""" 4
.el .IP "\f(CWsetup\fR" 4
.IX Item "setup"
Before you can use the commands described below, you need to perform some setup/configuration steps.
.Sp
This \*(L"wizard\*(R" style dialog, will walk you through the configuration process quickly and painlessly, with lots of explanation. You should run this command right away. You can also re-run it, and it will allow you to change your config, while defaulting to your existing settings.
.Sp
If you would rather do the steps by hand, see #Configuration\-Commands below.
.ie n .IP """upgrade""" 4
.el .IP "\f(CWupgrade\fR" 4
.IX Item "upgrade"
Upgrade the \f(CW\*(C`git\-hub\*(C'\fR installation to the latest version. Note: you need to be running 'git\-hub' from the source repo, and be on the master branch for this to work.
.ie n .IP """user [<user>]""" 4
.el .IP "\f(CWuser [<user>]\fR" 4
.IX Item "user [<user>]"
Show basic information about a specific user. User defaults to the owner of the current repo, or your login if you are not inside a repo directory. The \f(CW\*(C`\-\-raw\*(C'\fR and \f(CW\*(C`\-\-json\*(C'\fR options show the data in different formats than normal output.
.ie n .IP """user\-get <user> <data\-key>""" 4
.el .IP "\f(CWuser\-get <user> <data\-key>\fR" 4
.IX Item "user-get <user> <data-key>"
Get a specific data value for a particular user.
.ie n .IP """user\-edit <key\-value\-pair>...""" 4
.el .IP "\f(CWuser\-edit <key\-value\-pair>...\fR" 4
.IX Item "user-edit <key-value-pair>..."
Set specific fields of your user info to new values. You list the parameters as key/value pairs.
.Sp
You can edit the following user keys: \f(CW\*(C`name\*(C'\fR, \f(CW\*(C`email\*(C'\fR, \f(CW\*(C`blog\*(C'\fR, \f(CW\*(C`location\*(C'\fR, \f(CW\*(C`company\*(C'\fR, \f(CW\*(C`bio\*(C'\fR.
.ie n .IP """orgs [<user>]""" 4
.el .IP "\f(CWorgs [<user>]\fR" 4
.IX Item "orgs [<user>]"
List the organizations that a user is a member of.
.ie n .IP """org <org>""" 4
.el .IP "\f(CWorg <org>\fR" 4
.IX Item "org <org>"
Show basic information about a GitHub organization. The \f(CW\*(C`\-\-raw\*(C'\fR and \f(CW\*(C`\-\-json\*(C'\fR options show the data in different formats than normal output.
.ie n .IP """org\-repos <org>""" 4
.el .IP "\f(CWorg\-repos <org>\fR" 4
.IX Item "org-repos <org>"
Show all the repos for an organization, both public and private.
.ie n .IP """org\-members <org>""" 4
.el .IP "\f(CWorg\-members <org>\fR" 4
.IX Item "org-members <org>"
List members of an organization.
.ie n .IP """org\-get <org> <data\-key>""" 4
.el .IP "\f(CWorg\-get <org> <data\-key>\fR" 4
.IX Item "org-get <org> <data-key>"
Get a specific data value for a particular organization.
.ie n .IP """org\-edit <org> <key\-value\-pairs>...""" 4
.el .IP "\f(CWorg\-edit <org> <key\-value\-pairs>...\fR" 4
.IX Item "org-edit <org> <key-value-pairs>..."
Set specific meta-data fields of an organization to new values. You list the parameters as key/value pairs.
.Sp
You can edit the following organization keys: \f(CW\*(C`name\*(C'\fR, \f(CW\*(C`email\*(C'\fR, \f(CW\*(C`billing_email\*(C'\fR, \f(CW\*(C`blog\*(C'\fR, \f(CW\*(C`location\*(C'\fR, \f(CW\*(C`company\*(C'\fR.
.ie n .IP """teams <org>""" 4
.el .IP "\f(CWteams <org>\fR" 4
.IX Item "teams <org>"
List the teams in an organization.
.ie n .IP """team <team_id>""" 4
.el .IP "\f(CWteam <team_id>\fR" 4
.IX Item "team <team_id>"
Get information about a team.
.ie n .IP """team\-members <team_id>""" 4
.el .IP "\f(CWteam\-members <team_id>\fR" 4
.IX Item "team-members <team_id>"
List members of a team.
.ie n .IP """team\-repos <team_id>""" 4
.el .IP "\f(CWteam\-repos <team_id>\fR" 4
.IX Item "team-repos <team_id>"
List repos of a team.
.ie n .IP """team\-repo\-add <team_id> <repo>""" 4
.el .IP "\f(CWteam\-repo\-add <team_id> <repo>\fR" 4
.IX Item "team-repo-add <team_id> <repo>"
Add repo to a team. Repo name must not include org name.
.ie n .IP """team\-new <org> <name> <perm>""" 4
.el .IP "\f(CWteam\-new <org> <name> <perm>\fR" 4
.IX Item "team-new <org> <name> <perm>"
Add a new team (name) to an organization. The 'perm' arg must be pull, push or admin.
.ie n .IP """team\-delete <team_id>""" 4
.el .IP "\f(CWteam\-delete <team_id>\fR" 4
.IX Item "team-delete <team_id>"
Delete a team.
.ie n .IP """members <org>|<team_id>""" 4
.el .IP "\f(CWmembers <org>|<team_id>\fR" 4
.IX Item "members <org>|<team_id>"
List the members of an organization or team. If numeric argument, show team members, else organization members.
.ie n .IP """member\-get <team_id> <user>""" 4
.el .IP "\f(CWmember\-get <team_id> <user>\fR" 4
.IX Item "member-get <team_id> <user>"
Show whether a user is a member of a specified team.
.ie n .IP """member\-add <team_id> <user>""" 4
.el .IP "\f(CWmember\-add <team_id> <user>\fR" 4
.IX Item "member-add <team_id> <user>"
Add a user to a team.
.ie n .IP """member\-remove <team_id> <user>""" 4
.el .IP "\f(CWmember\-remove <team_id> <user>\fR" 4
.IX Item "member-remove <team_id> <user>"
Remove a user from a team.
.ie n .IP """followers [<user>]""" 4
.el .IP "\f(CWfollowers [<user>]\fR" 4
.IX Item "followers [<user>]"
List the people who are followers of a user.
.ie n .IP """follows <user> [<target\-user>]""" 4
.el .IP "\f(CWfollows <user> [<target\-user>]\fR" 4
.IX Item "follows <user> [<target-user>]"
Check if \f(CW\*(C`<user>\*(C'\fR follows \f(CW\*(C`<target\-user>\*(C'\fR. The default target user is you.
.ie n .IP """following [<user>]""" 4
.el .IP "\f(CWfollowing [<user>]\fR" 4
.IX Item "following [<user>]"
List the people that a user is following.
.ie n .IP """follow <user>...""" 4
.el .IP "\f(CWfollow <user>...\fR" 4
.IX Item "follow <user>..."
Follow one or more users.
.ie n .IP """unfollow <user>...""" 4
.el .IP "\f(CWunfollow <user>...\fR" 4
.IX Item "unfollow <user>..."
Stop following one or more users.
.ie n .IP """clone ([<owner>/]<repo> [<directory>])...""" 4
.el .IP "\f(CWclone ([<owner>/]<repo> [<directory>])...\fR" 4
.IX Item "clone ([<owner>/]<repo> [<directory>])..."
Clone a GitHub repo. Always uses \f(CW\*(C`\-\-recursive\*(C'\fR so you get submodules too. You can specifiy a list of repos. If you specify a directory for a repo, it should be an absolute path name or else begin with '.\fI' or '..\fR' so that it can be distinguished from another repo name.
.ie n .IP """repos [<user>]""" 4
.el .IP "\f(CWrepos [<user>]\fR" 4
.IX Item "repos [<user>]"
List the repos for a user or organization. List is returned in order of recent activity.
.ie n .IP """repo [<repo>]""" 4
.el .IP "\f(CWrepo [<repo>]\fR" 4
.IX Item "repo [<repo>]"
Show basic information about a specific repository. The \f(CW\*(C`\-\-raw\*(C'\fR and \f(CW\*(C`\-\-json\*(C'\fR options show the data in different formats than normal output.
.ie n .IP """repo\-get <owner>/<repo> <data\-key>""" 4
.el .IP "\f(CWrepo\-get <owner>/<repo> <data\-key>\fR" 4
.IX Item "repo-get <owner>/<repo> <data-key>"
Get a specific data value for a particular repository.
.ie n .IP """repo\-edit [<owner>/]<repo> <key\-value\-pair>...""" 4
.el .IP "\f(CWrepo\-edit [<owner>/]<repo> <key\-value\-pair>...\fR" 4
.IX Item "repo-edit [<owner>/]<repo> <key-value-pair>..."
Set specific meta-data fields of a repository to new values. You list the parameters as key/value pairs.
.Sp
You can edit the following repo keys: \f(CW\*(C`description\*(C'\fR, \f(CW\*(C`homepage\*(C'\fR.
.ie n .IP """repo\-new [<org>/]<repo>""" 4
.el .IP "\f(CWrepo\-new [<org>/]<repo>\fR" 4
.IX Item "repo-new [<org>/]<repo>"
Create a new GitHub repository.
.ie n .IP """repo\-init [<directory>]""" 4
.el .IP "\f(CWrepo\-init [<directory>]\fR" 4
.IX Item "repo-init [<directory>]"
This command is useful for setting up new repos. Just mkdir a new dir, cd into it and issue the command. It will 'git init', make the GitHub repo and add it as the origin remote. It will only do the things that have not yet been done.
.ie n .IP """repo\-delete <owner>/<repo>""" 4
.el .IP "\f(CWrepo\-delete <owner>/<repo>\fR" 4
.IX Item "repo-delete <owner>/<repo>"
Delete a GitHub repository.
.ie n .IP """forks [<owner>/<repo>]""" 4
.el .IP "\f(CWforks [<owner>/<repo>]\fR" 4
.IX Item "forks [<owner>/<repo>]"
List the forks of a repository.
.ie n .IP """fork <owner>/<repo> [\-\-org=<org>] [\-\-remote=<name>]""" 4
.el .IP "\f(CWfork <owner>/<repo> [\-\-org=<org>] [\-\-remote=<name>]\fR" 4
.IX Item "fork <owner>/<repo> [--org=<org>] [--remote=<name>]"
Fork a repository to your account or to an organization. Optionally, you can specify the name of a remote to add, pointing to your fork.
.ie n .IP """stars [<owner>/<repo>]""" 4
.el .IP "\f(CWstars [<owner>/<repo>]\fR" 4
.IX Item "stars [<owner>/<repo>]"
Show what users have starred a repository.
.ie n .IP """star [<owner>/<repo>]""" 4
.el .IP "\f(CWstar [<owner>/<repo>]\fR" 4
.IX Item "star [<owner>/<repo>]"
Add your \fBstar\fR to a repository.
.ie n .IP """unstar [<owner>/<repo>]""" 4
.el .IP "\f(CWunstar [<owner>/<repo>]\fR" 4
.IX Item "unstar [<owner>/<repo>]"
Remove your \fBstar\fR from a repository.
.ie n .IP """starred [<user>]""" 4
.el .IP "\f(CWstarred [<user>]\fR" 4
.IX Item "starred [<user>]"
List repositories that a user has starred.
.ie n .IP """watch [<owner>/<repo>]""" 4
.el .IP "\f(CWwatch [<owner>/<repo>]\fR" 4
.IX Item "watch [<owner>/<repo>]"
Start watching a repo.
.ie n .IP """unwatch [<owner>/<repo>]""" 4
.el .IP "\f(CWunwatch [<owner>/<repo>]\fR" 4
.IX Item "unwatch [<owner>/<repo>]"
Stop watching a repo.
.ie n .IP """watching [<user>]""" 4
.el .IP "\f(CWwatching [<user>]\fR" 4
.IX Item "watching [<user>]"
Show which repos a user is watching.
.ie n .IP """watchers [<owner>/<repo>]""" 4
.el .IP "\f(CWwatchers [<owner>/<repo>]\fR" 4
.IX Item "watchers [<owner>/<repo>]"
Show the users who are watching a repo.
.ie n .IP """collabs [<owner>/<repo>]""" 4
.el .IP "\f(CWcollabs [<owner>/<repo>]\fR" 4
.IX Item "collabs [<owner>/<repo>]"
List current collaborators for a repository.
.ie n .IP """trust [<owner>/<repo>] <user>...""" 4
.el .IP "\f(CWtrust [<owner>/<repo>] <user>...\fR" 4
.IX Item "trust [<owner>/<repo>] <user>..."
Add one or more collaborators to a repository.
.ie n .IP """untrust [<owner>/<repo>] <user>...""" 4
.el .IP "\f(CWuntrust [<owner>/<repo>] <user>...\fR" 4
.IX Item "untrust [<owner>/<repo>] <user>..."
Remove one or more collaborators from a repository.
.ie n .IP """issues [<owner>/<repo>] [\-\-all]""" 4
.el .IP "\f(CWissues [<owner>/<repo>] [\-\-all]\fR" 4
.IX Item "issues [<owner>/<repo>] [--all]"
List the open issues for a repo. Use the \f(CW\*(C`\-\-all\*(C'\fR flag to see both open and closed issues.
.ie n .IP """issue [<owner>/<repo>] <issue\-id\-number>""" 4
.el .IP "\f(CWissue [<owner>/<repo>] <issue\-id\-number>\fR" 4
.IX Item "issue [<owner>/<repo>] <issue-id-number>"
Show info (including any comments) for a specific issue. If no issue number is given, this command will call \f(CW\*(C`issue\-new\*(C'\fR instead.
.ie n .IP """issue\-new [<owner>/<repo>]""" 4
.el .IP "\f(CWissue\-new [<owner>/<repo>]\fR" 4
.IX Item "issue-new [<owner>/<repo>]"
Create a new issue for a repository.
.ie n .IP """issue\-edit [<owner>/<repo>] <issue\-id\-number>""" 4
.el .IP "\f(CWissue\-edit [<owner>/<repo>] <issue\-id\-number>\fR" 4
.IX Item "issue-edit [<owner>/<repo>] <issue-id-number>"
Add a comment. Change values of 'title', 'state', 'assignee' and 'milestone'. Changing state to 'closed' will close the issue.
.ie n .IP """comment [<owner>/<repo>] <issue\-id\-number>""" 4
.el .IP "\f(CWcomment [<owner>/<repo>] <issue\-id\-number>\fR" 4
.IX Item "comment [<owner>/<repo>] <issue-id-number>"
Add a comment to an issue. You can also use \f(CW\*(C`issue\-edit\*(C'\fR to just add a comment.
.ie n .IP """issue\-close [<owner>/<repo>] <issue\-id\-number>""" 4
.el .IP "\f(CWissue\-close [<owner>/<repo>] <issue\-id\-number>\fR" 4
.IX Item "issue-close [<owner>/<repo>] <issue-id-number>"
Close an issue. You can also use \f(CW\*(C`issue\-edit\*(C'\fR to close an issue.
.ie n .IP """issue\-resolve [<owner>/<repo>] <issue\-id\-number>""" 4
.el .IP "\f(CWissue\-resolve [<owner>/<repo>] <issue\-id\-number>\fR" 4
.IX Item "issue-resolve [<owner>/<repo>] <issue-id-number>"
Add a comment to an issue and then close it.
.ie n .IP """pr\-list [<owner>/<repo>]""" 4
.el .IP "\f(CWpr\-list [<owner>/<repo>]\fR" 4
.IX Item "pr-list [<owner>/<repo>]"
List the pull requests for a repo.
.ie n .IP """pr\-new [<issue\-id\-number>] [<options>]""" 4
.el .IP "\f(CWpr\-new [<issue\-id\-number>] [<options>]\fR" 4
.IX Item "pr-new [<issue-id-number>] [<options>]"
Create a new pull request for a repository based on the current branch. If an issue \s-1ID\s0 number is given, this command will attach the pull request to the issue instead of creating a new one.
.Sp
If the default remote is a fork, the pull request will target the default branch of the parent repository. Otherwise the pull request will target the default branch of the default remote itself. Use \f(CW\*(C`\-\-remote\*(C'\fR, \f(CW\*(C`\-\-branch\*(C'\fR, \f(CW\*(C`\-\-parent\*(C'\fR, and \f(CW\*(C`\-\-base\*(C'\fR options to change the default source remote, source branch, target remote and target branch (respectively).
.ie n .IP """pr\-diff [<owner>/<repo>] <issue\-id\-number>""" 4
.el .IP "\f(CWpr\-diff [<owner>/<repo>] <issue\-id\-number>\fR" 4
.IX Item "pr-diff [<owner>/<repo>] <issue-id-number>"
Show the diff for a pull request.
.ie n .IP """pr\-fetch [<owner>/<repo>] <issue\-id\-number>""" 4
.el .IP "\f(CWpr\-fetch [<owner>/<repo>] <issue\-id\-number>\fR" 4
.IX Item "pr-fetch [<owner>/<repo>] <issue-id-number>"
Fetches a pull request to a local \f(CW\*(C`review/$number\*(C'\fR branch
.ie n .IP """pr\-merge [<owner>/<repo>] <issue\-id\-number>""" 4
.el .IP "\f(CWpr\-merge [<owner>/<repo>] <issue\-id\-number>\fR" 4
.IX Item "pr-merge [<owner>/<repo>] <issue-id-number>"
Merge and close a pull request.
.ie n .IP """pr\-queue [<user>] [\-\-count=#] [\-\-all]""" 4
.el .IP "\f(CWpr\-queue [<user>] [\-\-count=#] [\-\-all]\fR" 4
.IX Item "pr-queue [<user>] [--count=#] [--all]"
Show a user's Pull Request queue, for all repos. Shows the open PRs for any repo that has them. The \f(CW\*(C`\-\-count\*(C'\fR option tells how many repos to check. The \f(CW\*(C`\-\-all\*(C'\fR option says to show closed as well as open PRs.
.Sp
Note: this command makes more \s-1API\s0 calls than most other commands and thus runs slower. You might want to tee the output to a file, if you need to get back to this data a lot.
.ie n .IP """notify\-list [\-\-all]""" 4
.el .IP "\f(CWnotify\-list [\-\-all]\fR" 4
.IX Item "notify-list [--all]"
List your recent \fIunread\fR user notifications. To list your \fIread\fR notifications as well, use the \f(CW\*(C`\-\-all\*(C'\fR option.
.ie n .IP """keys [<user>]""" 4
.el .IP "\f(CWkeys [<user>]\fR" 4
.IX Item "keys [<user>]"
List public \s-1SSH\s0 keys for a user.
.ie n .IP """keys\-add <title> <key>""" 4
.el .IP "\f(CWkeys\-add <title> <key>\fR" 4
.IX Item "keys-add <title> <key>"
Add a public ssh key for your user.
.ie n .IP """cache\-clear""" 4
.el .IP "\f(CWcache\-clear\fR" 4
.IX Item "cache-clear"
Clear your \s-1API\s0 response cache.
.ie n .IP """open [<owner>/<repo>] [<file\-path>]""" 4
.el .IP "\f(CWopen [<owner>/<repo>] [<file\-path>]\fR" 4
.IX Item "open [<owner>/<repo>] [<file-path>]"
Open a browser window to a repo or a file in a repo.
.ie n .IP """url [<owner>/<repo>] [<file\-path> [<line\-number>]]""" 4
.el .IP "\f(CWurl [<owner>/<repo>] [<file\-path> [<line\-number>]]\fR" 4
.IX Item "url [<owner>/<repo>] [<file-path> [<line-number>]]"
Print the \s-1URL\s0 of a repo or a file in a repo.
.ie n .IP """git\-hub\-travis""" 4
.el .IP "\f(CWgit\-hub\-travis\fR" 4
.IX Item "git-hub-travis"
Enable and/or disable travis-ci testing from the command line.
.ie n .IP """gists [<user>]""" 4
.el .IP "\f(CWgists [<user>]\fR" 4
.IX Item "gists [<user>]"
List gists for a user.
.ie n .IP """gist <gist\-id>""" 4
.el .IP "\f(CWgist <gist\-id>\fR" 4
.IX Item "gist <gist-id>"
Show info about gist.
.ie n .IP """gist\-get <gist\-id> <data\-key>""" 4
.el .IP "\f(CWgist\-get <gist\-id> <data\-key>\fR" 4
.IX Item "gist-get <gist-id> <data-key>"
Get a specific data value for a particular gist.
.ie n .IP """gist\-edit <gist\-id> <key\-value\-pair...>""" 4
.el .IP "\f(CWgist\-edit <gist\-id> <key\-value\-pair...>\fR" 4
.IX Item "gist-edit <gist-id> <key-value-pair...>"
Set specific meta-data fields of a gist to new values. You list the parameters as key/value pairs.
.ie n .IP """gist\-star <gist\-id>""`" 4
.el .IP "\f(CWgist\-star <gist\-id>\fR`" 4
.IX Item "gist-star <gist-id>`"
Add your \fBstar\fR to a gist.
.ie n .IP """gist\-unstar <gist\-id>""" 4
.el .IP "\f(CWgist\-unstar <gist\-id>\fR" 4
.IX Item "gist-unstar <gist-id>"
Remove your \fBstar\fR from a gist.
.ie n .IP """gist\-delete <gist\-id>""" 4
.el .IP "\f(CWgist\-delete <gist\-id>\fR" 4
.IX Item "gist-delete <gist-id>"
Delete a gist.
.ie n .IP """gist\-clone <gist\-id> [<directory>]""" 4
.el .IP "\f(CWgist\-clone <gist\-id> [<directory>]\fR" 4
.IX Item "gist-clone <gist-id> [<directory>]"
Clone a gist.
.ie n .IP """gist\-fork <gist\-id>""" 4
.el .IP "\f(CWgist\-fork <gist\-id>\fR" 4
.IX Item "gist-fork <gist-id>"
Fork a gist.
.ie n .IP """gist\-new (public|secret) <description> <files...>""" 4
.el .IP "\f(CWgist\-new (public|secret) <description> <files...>\fR" 4
.IX Item "gist-new (public|secret) <description> <files...>"
Create a gist from existing files
.ie n .IP """gist\-init (public|secret) <description>""" 4
.el .IP "\f(CWgist\-init (public|secret) <description>\fR" 4
.IX Item "gist-init (public|secret) <description>"
Create an (almost) empty gist and clone it
.Sp
This will create a gist with a file '.gitignore'
.SS "Plugin Commands"
.IX Subsection "Plugin Commands"
You get tons of useful commands by default, and they are all listed and documented in the next section below. But \f(CW\*(C`git\-hub\*(C'\fR also supports third party plugin commands.
.PP
This section is about the \*(L"plugin\*(R" commands that currently come with \f(CW\*(C`git\-hub\*(C'\fR.
.ie n .IP """irc\-enable <room> [<server>]""" 4
.el .IP "\f(CWirc\-enable <room> [<server>]\fR" 4
.IX Item "irc-enable <room> [<server>]"
This command must be run inside a cloned repo. It enables GitHub activities for a repo to be reported to an \s-1IRC\s0 channel.
.ie n .IP """irc\-enable""" 4
.el .IP "\f(CWirc\-enable\fR" 4
.IX Item "irc-enable"
This command must be run inside a cloned repo. It disables the GitHub \s-1IRC\s0 webhook for a repo.
.ie n .IP """irc\-url""" 4
.el .IP "\f(CWirc\-url\fR" 4
.IX Item "irc-url"
Show the GitHub \s-1URL\s0 for setting webhooks on the current repo.
.SS "Configuration Commands"
.IX Subsection "Configuration Commands"
These commands are for editing your \f(CW\*(C`git\-hub\*(C'\fR config file and managing your GitHub authentication tokens.
.ie n .IP """config [<config\-key> [<config\-value>]]""" 4
.el .IP "\f(CWconfig [<config\-key> [<config\-value>]]\fR" 4
.IX Item "config [<config-key> [<config-value>]]"
With no args, this command will print the contents of \f(CW\*(C`~/.git\-hub/config\*(C'\fR. With With one argument (a key), print the current value of the config key. With two arguments (key value), set the value of the config key. 4 keys are currently supported: \f(CW\*(C`login\*(C'\fR, \f(CW\*(C`api\-token\*(C'\fR, \f(CW\*(C`use\-auth\*(C'\fR, and \f(CW\*(C`json\-lib\*(C'\fR.
.ie n .IP """config\-unset <config\-key>""" 4
.el .IP "\f(CWconfig\-unset <config\-key>\fR" 4
.IX Item "config-unset <config-key>"
Unset a config key. Removes the key from the \f(CW\*(C`~/.git\-hub/config\*(C'\fR file.
.ie n .IP """tokens""" 4
.el .IP "\f(CWtokens\fR" 4
.IX Item "tokens"
List all the \s-1API\s0 tokens for your GitHub account. Use the \f(CW\*(C`\-\-raw\*(C'\fR option to print the token IDs and descriptions, but not the actual token values.
.ie n .IP """token\-new [<description\-string>]""" 4
.el .IP "\f(CWtoken\-new [<description\-string>]\fR" 4
.IX Item "token-new [<description-string>]"
Create a new \s-1API\s0 token for your GitHub login id. Note: Creating a new token will not automatically add it to your \f(CW\*(C`~/.git\-hub/config\*(C'\fR file; you need to do that yourself with the \f(CW\*(C`git hub config api\-token <token\-value>\*(C'\fR command. Use the \f(CW\*(C`\-\-raw\*(C'\fR option to just print the new token id.
.ie n .IP """token\-get <api\-token\-id> <data\-key>""" 4
.el .IP "\f(CWtoken\-get <api\-token\-id> <data\-key>\fR" 4
.IX Item "token-get <api-token-id> <data-key>"
Get a specific data value for a particular token.
.ie n .IP """token\-delete <api\-token\-id>""" 4
.el .IP "\f(CWtoken\-delete <api\-token\-id>\fR" 4
.IX Item "token-delete <api-token-id>"
Delete one of your \s-1API\s0 tokens for your GitHub login id. Note: You need to delete tokens by \fBid\fR (listed by the \f(CW\*(C`tokens\*(C'\fR command), not by token value.
.ie n .IP """scopes <api\-token\-id>""" 4
.el .IP "\f(CWscopes <api\-token\-id>\fR" 4
.IX Item "scopes <api-token-id>"
List the scopes assigned to your \s-1API\s0 token, and also list all the possible scope values that you can assign. Use the \f(CW\*(C`\-\-raw\*(C'\fR option to just list the scopes.
.ie n .IP """scope\-add <api\-token\-id> <scope\-name>...""" 4
.el .IP "\f(CWscope\-add <api\-token\-id> <scope\-name>...\fR" 4
.IX Item "scope-add <api-token-id> <scope-name>..."
Add one or more scopes to your \s-1API\s0 token. You can use the \f(CW\*(C`\-\-all\*(C'\fR option to add all possible scopes at once.
.ie n .IP """scope\-remove <api\-token\-id> <scope\-name>...""" 4
.el .IP "\f(CWscope\-remove <api\-token\-id> <scope\-name>...\fR" 4
.IX Item "scope-remove <api-token-id> <scope-name>..."
Remove one or more scopes from your \s-1API\s0 token. You can use the \f(CW\*(C`\-\-all\*(C'\fR option to remove all possible scopes at once.
.SH "Upgrading git-hub"
.IX Header "Upgrading git-hub"
If you used the \f(CW\*(C`PATH\*(C'\fR method of installation, just run this to upgrade \f(CW\*(C`git\-hub\*(C'\fR:
.PP
.Vb 1
\&    git hub upgrade
.Ve
.PP
Or (same thing):
.PP
.Vb 2
\&    cd /path/to/git\-hub
\&    git pull
.Ve
.PP
If you used \f(CW\*(C`make install\*(C'\fR method, then run this again (after \f(CW\*(C`git pull\*(C'\fR):
.PP
.Vb 1
\&    make install        # Possibly with \*(Aqsudo\*(Aq
.Ve
.SH "Command Completion"
.IX Header "Command Completion"
The \f(CW\*(C`git hub\*(C'\fR command supports \f(CW\*(C`<TAB>\*(C'\fR\-based command completion. If you don't use the \f(CW\*(C`init\*(C'\fR script (see Installation, above), you'll need to enable this manually to use it.
.SS "In Bash"
.IX Subsection "In Bash"
If your Bash setup does not already provide command completion for Git, you'll need to enable that first:
.PP
.Vb 1
\&    source <Git completion script>
.Ve
.PP
On your system, the Git completion script might be found at any of the following locations (or somewhere else that we don't know about):
.IP "\(bu" 4
\&\f(CW\*(C`/etc/bash_completion.d/git\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`/usr/share/bash\-completion/git\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`/usr/share/bash\-completion/completions/git\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`/opt/local/share/bash\-completion/completions/git\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`/usr/local/etc/bash_completion.d/git\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`~/.homebrew/etc/bash_completion.d/git\*(C'\fR
.PP
In case you can't find any of these, this repository contains a copy of the Git completion script:
.PP
.Vb 1
\&    source /path/to/git\-hub/share/git\-completion.bash
.Ve
.PP
Once Git completion is enabled (whether you needed to do that manually or not), you can turn on \f(CW\*(C`git\-hub\*(C'\fR completion with a command like this:
.PP
.Vb 1
\&    source /path/to/git\-hub/share/completion.bash
.Ve
.SS "In zsh"
.IX Subsection "In zsh"
In the Z shell (zsh), you can manually enable \f(CW\*(C`git\-hub\*(C'\fR completion by adding the following line to your \f(CW\*(C`~/.zshrc\*(C'\fR, \fBbefore\fR the \f(CW\*(C`compinit\*(C'\fR function is called:
.PP
.Vb 1
\&    fpath=(\*(Aq/path/to/git\-hub/share/zsh\-completion\*(Aq $fpath)
.Ve
.SH "Plugins"
.IX Header "Plugins"
The \f(CW\*(C`git\-hub\*(C'\fR command supports plugins. All you need to do to install a plugin, is to clone the plugin repo into the \f(CW\*(C`plugin/\*(C'\fR subdirectory of the \f(CW\*(C`git\-hub\*(C'\fR repository. There are example plugins already installed. If you do a system-style install, then just \f(CW\*(C`make install\*(C'\fR the plugins too.
.SH "Faster"
.IX Header "Faster"
The \f(CW\*(C`git\-hub\*(C'\fR command is written in pure Bash, including a complete \s-1JSON\s0 parser written in Bash. Unfortunately, this parser is a bit slow. It is \fBreally\fR slow for large \s-1API\s0 payloads.
.PP
To make the \f(CW\*(C`git\-hub\*(C'\fR command perform much faster, just run this command:
.PP
.Vb 1
\&    git hub config json\-lib json\-perl.bash
.Ve
.PP
That will enable a Perl replacement, which requires Perl (of course) and the \s-1JSON\s0.pm Perl module. If the \s-1JSON::XS\s0 Perl module is also installed, it will be even faster.
.SH "Pipe and Each"
.IX Header "Pipe and Each"
You can pipe the output of one \f(CW\*(C`git hub\*(C'\fR into another and multiply your power. The command being piped into should use the \s-1EACH\s0 option which is a single dash ('\-'). It will cause the command to be run once for each line of input, inserting the line into the command, in place of the '\-'. If you use a '=' it will do the same thing except for each \*(L"word\*(R" of input.
.PP
This command:
.PP
.Vb 1
\&    git hub followers \-\-raw
.Ve
.PP
will list lines containing only user ids. You can pipe it into commands needing a user id, like:
.PP
.Vb 1
\&    git hub followers \-\-raw | git hub user \- \-\-json
.Ve
.PP
Thus printing the \s-1JSON\s0 user info for each follower. Same as:
.PP
.Vb 3
\&    for _ in \`git hub followers \-\-raw\`; do
\&      git hub user $_ \-\-json
\&    done
.Ve
.PP
For '=' you can do things like:
.PP
.Vb 1
\&    echo alice bob chelsea | git hub trust =
.Ve
.PP
to trust a list of users in one go.
.SH "Token Authentication and Scopes"
.IX Header "Token Authentication and Scopes"
Many endpoints of the GitHub v3 \s-1API\s0 require a Personal \s-1API\s0 Access Token. You can list your current tokens with this command:
.PP
.Vb 1
\&    git hub tokens
.Ve
.PP
If you don't have any tokens or want a new one for the \f(CW\*(C`git\-hub\*(C'\fR command, run these commands (the \f(CW\*(C`git hub setup\*(C'\fR command automates this):
.PP
.Vb 4
\&    git hub token\-new "my git\-hub command token"
\&    git hub scope\-add <token\-id> user repo
\&    git hub scopes <token\-id>
\&    git hub config api\-token <token\-value>
.Ve
.PP
You can also see all your tokens on the web at this page <https://github.com/settings/applications>.
.PP
You can specify your \s-1API\s0 token to \f(CW\*(C`git hub\*(C'\fR on the commandline with \f(CW\*(C`\-\-token=...\*(C'\fR or in the \f(CW\*(C`GIT_HUB_API_TOKEN\*(C'\fR environment variable, but the easiest thing to do is just set it in the git-hub config.
.PP
Certain token \fBscopes\fR are required for various GitHub \s-1API\s0 operations. Make sure your token has the scopes turned on for the things you want to do. See the \f(CW\*(C`scopes\*(C'\fR, \f(CW\*(C`scope\-add\*(C'\fR and \f(CW\*(C`scope\-remove\*(C'\fR \f(CW\*(C`git hub\*(C'\fR subcommands.
.PP
\&\s-1NOTE:\s0 All the \f(CW\*(C`git hub\*(C'\fR commands dealing with tokens and scopes require you to enter your GitHub password. If you need to issue a bunch of these commands and you don't want to retype your password each time, you can put your password in the \f(CW\*(C`GIT_HUB_PASSWORD\*(C'\fR environment variable.
.SH "Rate Limits"
.IX Header "Rate Limits"
GitHub limits unauthenticated \s-1API\s0 calls to 60 per hour, and authenticated \s-1API\s0 calls to 5000 per hour. For this reason you may wish to use authentication even for calls that don't need it. You can use the \f(CW\*(C`\-A/\-\-use\-auth\*(C'\fR option to make sure a command uses authentication. You can also set the config file to always use authentication, with this command:
.PP
.Vb 1
\&    git hub config use\-auth true
.Ve
.PP
Another option is to set the \s-1GIT_HUB_USE_AUTH\s0 environment variable:
.PP
.Vb 1
\&    export GIT_HUB_USE_AUTH=true
.Ve
.SH "ETAG Caching"
.IX Header "ETAG Caching"
GitHub provides ETag headers in the \s-1API\s0 responses, and \f(CW\*(C`git\-hub\*(C'\fR uses them to cache responses, by default. When you use this feature, your rate-limit usage is not affected for cached responses.
.PP
GitHub has had caching bugs in their \s-1API\s0 in the past. If you suspect the cache is stale, you may want to try these options:
.IP "\(bu" 4
Use the \f(CW\*(C`\-C\*(C'\fR (\f(CW\*(C`\-\-no\-cache\*(C'\fR) flag on a request to bypass the cache.
.IP "\(bu" 4
Set \f(CW\*(C`GIT_HUB_NO_CACHE=true\*(C'\fR to bypass the cache.
.IP "\(bu" 4
Run \f(CW\*(C`git hub config no\-cache true\*(C'\fR to never use the cache.
.IP "\(bu" 4
Run \f(CW\*(C`git hub cache\-clear\*(C'\fR to erase all the cached values.
.SH "Examples"
.IX Header "Examples"
The following sections show lots of interesting ways to use \f(CW\*(C`git hub\*(C'\fR. Let your imagination be your guide.
.SS "Example 1. Create a new repo and GitHub origin"
.IX Subsection "Example 1. Create a new repo and GitHub origin"
Do everything from the command line:
.PP
.Vb 10
\&    $ mkdir foo
\&    $ cd foo
\&    $ echo \*(AqThe new foo\*(Aq > README
\&    $ git init
\&    $ git add README
\&    $ git commit \-m \*(AqFirst commit\*(Aq
\&    $ git hub new foo
\&    $ git hub repo foo      # Get repo info including the remote address
\&    $ git remote add origin <new\-remote\-address>
\&    $ git push origin master
\&    $ git hub repo\-edit \e
\&        description  \*(AqThe new foo\*(Aq \e
\&        homepage     http://example.com
\&    $ git hub repo
.Ve
.PP
Note that on the last two commands you don't need to set the \f(CW\*(C`<repo>\*(C'\fR because it can be gleaned from the remote. Also on the \f(CW\*(C`edit\*(C'\fR command notice how you can specify multiple key/value pairs.
.SS "Example 2. Commands from within a repo"
.IX Subsection "Example 2. Commands from within a repo"
Assume your current working directory is not a GitHub repo:
.PP
.Vb 10
\&    $ # List *your* repos:
\&    $ git hub repos
\&    $ # Clone someone else\*(Aqs repo:
\&    $ git hub clone ingydotnet/git\-hub
\&    $ # cd into it:
\&    $ cd git\-hub
\&    $ # Get info about ingydotnet:
\&    $ git hub user
\&    $ # Show ingydotnet\*(Aqs recent repos:
\&    $ git hub repos
\&    $ # Show info about ingydotnet/git\-hub:
\&    $ git hub repo
\&    $ # Fork the git\-hub repo:
\&    $ git hub fork
\&    $ # Follow ingydotnet:
\&    $ git hub follow
\&    $ # See who ingydotnet is following:
\&    $ git hub following
\&    $ # Star the ingydotnet/git\-hub repo:
\&    $ git hub star
\&    $ # etc...
.Ve
.PP
The \f(CW\*(C`git hub\*(C'\fR command tries to be environmentally aware. If you are in a GitHub cloned repo directory, and you don't specify \f(CW\*(C`<user>\*(C'\fR or \f(CW\*(C`<owner>\*(C'\fR or \f(CW\*(C`<repo>\*(C'\fR for a command that needs them, then they will be pulled from the remote url. Otherwise, if you don't specify a \f(CW\*(C`<user>\*(C'\fR it will use the one (presumably yours) that you set with the \f(CW\*(C`git hub config login ...\*(C'\fR command.
.SS "Example 3. Building Complex Commands"
.IX Subsection "Example 3. Building Complex Commands"
The \f(CW\*(C`git hub\*(C'\fR command can be used to output raw data, which can be fed into other commands; even other \f(CW\*(C`git hub\*(C'\fR commands. This lets you do some powerful automation with very little code. The \f(CW\*(C`\-\-raw\*(C'\fR (\f(CW\*(C`\-r\*(C'\fR) flag will make the output of many commands be usable as data, and the \f(CW\*(C`\-\*(C'\fR (\s-1EACH\s0) option makes commands read data from stdin.
.PP
Get information about all your followers:
.PP
.Vb 3
\&    for user in $(git hub followers <your\-login> \-r); do
\&      git hub user $user
\&    done
.Ve
.PP
Or more simply by using \s-1PIPE\s0 and \s-1EACH:\s0
.PP
.Vb 1
\&    git hub followers \-r | git hub user \-
.Ve
.PP
Follow all your followers:
.PP
.Vb 1
\&    git hub followers \-r | git hub follow \-
.Ve
.PP
Find out if the people you are following, are following you!
.PP
.Vb 1
\&    git hub following \-r | git hub follows \-
.Ve
.PP
View all the open issues on a repository at once:
.PP
.Vb 1
\&    git hub issues \-r | git hub issue \-
.Ve
.PP
Clone all the repos in an organization:
.PP
.Vb 1
\&    git hub repos <org> \-r | git hub clone \-
.Ve
.PP
Star the latest 5 repos from all the people you are following that have more than 50 repos:
.PP
.Vb 5
\&    git hub following <your\-login> \-r |
\&      git hub user\-get \- public_repos |
\&      perl \-nle \*(Aqprint if $_ > 50\*(Aq |
\&      git hub repos \- \-rc5 |
\&      git hub star \-
.Ve
.SH "Author"
.IX Header "Author"
Written by Ingy dÃ¶t Net <ingy@ingy.net>
.SH "Status"
.IX Header "Status"
This command is over a year old. It does a ton of stuff well, but still has a lot to do to be complete.
.PP
The plan is to support as much of the \s-1API\s0 as possible. Patches / Pull Requests welcome. See the file \f(CW\*(C`notes/todo\*(C'\fR in the \f(CW\*(C`git\-hub\*(C'\fR repo for upcoming changes.
.PP
Try \f(CW\*(C`make test\*(C'\fR. There are tests in place but testing is not yet extensive. Expect more testing soon. Also please include tests-in-kind for any patches you submit.
.PP
Find 'ingy' on #git\-commands in irc.freenode.net if you have questions or ideas.
.SH "Copyright & License"
.IX Header "Copyright & License"
Copyright 2013\-2015. Ingy dÃ¶t Net.
.PP
The \s-1MIT\s0 License (\s-1MIT\s0)

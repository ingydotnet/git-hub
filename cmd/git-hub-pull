#!/usr/bin/env bash

command:pull-request() {
  require-auth
  get-args 'owner/repo' "branch:'master'"

  msg_ok=0
  assert-inside-git-repo
  assert-repo-top-level
  assert-git-repo-is-clean
  get-remote-name
  assert-git-head-is-pushed
  git fetch "git@github.com:$owner/$repo" "$branch" &> /dev/null ||
    error "can't fetch repo='git@github.com:$owner/$repo' branch='$branch'."

  local diff="$(git diff FETCH_HEAD)"
  if [ -z "$diff" ]; then
    echo "No changes between this repo and specified remote."
    return
  fi

  if [ -z "$branch_name" ]; then
    branch_name="$(git rev-parse --abbrev-ref HEAD)"
  fi
  local head="$login:$branch_name"
  local base="$branch"
  local url="/repos/$owner/$repo/pulls"

  editor-title-body "
# New GitHub Pull Request
#
# Requesting that...
#   repo: $(git config --get "remote.${remote_name}.url")
#   branch: $branch_name
# ...be pulled into...
#   repo: git@github.com:$owner/$repo
#   branch: $branch
#
# Enter your pull request info at the top like this:
#
#   First line is the pull request subject
#
#   The pull request body comes here, after a blank line separating it from
#   the subject.
#
#   The body can be as many lines as needed, and is optional. Only the pull
#   request subject is required.
#
$diff"

  api-post "$url" "$(
    json-dump-object head "$head" base "$base" title "$title" body "$body"
  )"
}

command:pulls() {
  get-args '?owner:get-owner/repo:get-repo'

  state=open
  "$do_all" && state=all

  title="Pull requests for '$owner/$repo' (state=$state):"

  report-list \
    "/repos/$owner/$repo/pulls?state=$state;sort=updated;per_page=PER_PAGE" \
    'number state title user/login created_at updated_at head/label base/label'
}

format-entry:pulls() {
  if "$raw_output"; then
    echo "$2"
  else
    printf "#%-3d %-8s %s\n     @%-12s Created: %s  Updated: %s\n     %s\n" \
      "$2" "($3)" "$4" "$5" "${6/T*/}" "${7/T*/}" "$8 â†’ $9"
  fi
}

command:pull-diff() {
  get-args '?owner:get-owner/repo:get-repo' number
  api-get "/repos/$owner/$repo/pulls/$number"
}

ok:pull-diff() {
  head_url="$(JSON.get -s /head/repo/ssh_url -)"
  head_sha="$(JSON.get -s /head/sha -)"
  head_ref="$(JSON.get -s /head/ref -)"
  git fetch "$head_url" "$head_ref" &> /dev/null

  base_url="$(JSON.get -s /base/repo/ssh_url -)"
  base_sha="$(JSON.get -s /base/sha -)"
  base_ref="$(JSON.get -s /base/ref -)"
  git fetch "$base_url" "$base_ref" &> /dev/null

  git diff "$base_sha" "$head_sha"
}

command:pull-fetch() {
  get-args '?owner:get-owner/repo:get-repo' number
  assert-inside-git-repo
  if [ -n "$(git branch | grep review/$number)" ]; then
    echo "Branch review/$number already exists"
  else
    git fetch -f "git@github.com:$owner/$repo" "refs/pull/$number/head:review/$number" ||
        error "can't fetch PR $number"
  fi
  msg_ok=0
}

command:pull-merge() {
  get-args '?owner:get-owner/repo:get-repo' number '?message'
  # TODO Support merge message
  local json='{}'
  api-put "/repos/$owner/$repo/pulls/$number/merge" "$json"
}

command:pull-queue() {
  get-args '?user:get-user'
  local option1= option2=
  [ -n "$count_option" ] && option1=" --count=$count_option"
  $do_all && option2=" --all"

  for repo in `git hub repos $user -r$option1`; do
    local pulls="`git hub pulls $repo$option2`"
    if [[ ! "$pulls" =~ --None-- ]]; then
      echo
      echo "$pulls"
    fi
  done
  set +x

  msg_ok=0
}

# vim: set ft=sh lisp:

#compdef git-hub -P git\ ##hub
#description perform GitHub operations

# DO NOT EDIT. This file generated by tool/generate-completion.pl.

if [[ -z $GIT_HUB_ROOT ]]; then
	echo 'GIT_HUB_ROOT is null; has `/path/to/git-hub/.rc` been sourced?'
	return 3
fi

_git-hub() {
    typeset -A opt_args
    local curcontext="$curcontext" state line context

    local update_policy
    zstyle -s ":completion:$curcontext:" cache-policy update_policy
    if [[ -z "$update_policy" ]]; then
        zstyle ":completion:$curcontext:" cache-policy _git_hub_caching_policy
    fi

    _arguments -s \
        '1: :->subcmd' \
        '2: :->repo' \
        '-h[Show the command summary]:' \
        '--help[Browse the complete '"'"'git-hub'"'"' documentation]:' \
        '--remote[Remote name (like '"'"'origin'"'"')]:remote:_git-hub-complete-remote' \
        '--branch[Branch name (like '"'"'main'"'"')]:branch' \
        '--sha[Commit SHA]:sha' \
        '--org[GitHub organization name]:org' \
        '--method[Which method to merge (merge, squash, rebase)]:method' \
        '--title[Commit title]:title' \
        '--msg[Commit message]:msg' \
        '(-c --count)'{-c,--count}'[Number of list items to show]:c' \
        '(-a --all)'{-a,--all}'[Show all list items]:' \
        '(-q --quiet)'{-q,--quiet}'[Show minimal output]:' \
        '(-v --verbose)'{-v,--verbose}'[Show verbose output]:' \
        '(-r --raw)'{-r,--raw}'[Show output data in a raw form]:' \
        '(-j --json)'{-j,--json}'[Show output data in JSON]:' \
        '(-A --use-auth)'{-A,--use-auth}'[Force the use of authentication. (Get around rate limits)]:' \
        '(-C --no-cache)'{-C,--no-cache}'[Don'"'"'t use cached responses.]:' \
        '--token[Explicitly specify the GitHub v3 API Authentication Token]:token' \
        '(-d --dryrun)'{-d,--dryrun}'[Check arguments but don'"'"'t actually run the API command]:' \
        '-T[Show (don'"'"'t hide) API token in the verbose output]:' \
        '-O[Debug - Show response output]:' \
        '-H[Debug - Show reponse headers]:' \
        '-J[Debug - Show parsed JSON response]:' \
        '-R[Debug - Repeat last command without contacting server]:' \
        '-x[Debug - Turn on Bash trace (set -x) output]:' \
        && ret=0

    case $state in
    subcmd)
        compadd cache-clear clone collabs comment config config-keys config-list config-unset follow followers following follows fork forks gist gist-clone gist-delete gist-edit gist-fork gist-get gist-init gist-new gist-star gist-unstar gists git-hub-travis help info irc-enable irc-enable irc-url issue issue-close issue-edit issue-new issue-resolve issues keys keys-add member-add member-get member-remove members notify-list open org org-edit org-get org-members org-repos orgs pr-created pr-diff pr-fetch pr-involves pr-list pr-merge pr-new pr-queue repo repo-delete repo-edit repo-get repo-init repo-new repos scope-add scope-remove scopes search-issues search-repo search-user setup star starred stars team team-delete team-members team-new team-repo-add team-repos teams token-delete token-get token-new tokens trust unfollow unstar untrust unwatch upgrade url user user-edit user-get version watch watchers watching
    ;;
    repo)
        case $line[1] in
        clone|collabs|comment|fork|forks|issue|issue-close|issue-edit|issue-new|issue-resolve|issues|open|pr-diff|pr-fetch|pr-list|pr-merge|repo|repo-delete|repo-edit|repo-get|star|stars|trust|unstar|untrust|unwatch|url|watch|watchers)
            [[ "$line[2]" =~ ^- ]] && return;
            local repo_to_complete="$line[2]"
            if [[ "$repo_to_complete" =~ "^@/?$" || \
                "$repo_to_complete" =~ "^@/(.*)" || \
                "$repo_to_complete" =~ "^/?([a-z0-9_-]*)$" ]];
            then
                local login=`git hub config login`
                compadd -U -S '' "$login/$match[1]"
                return
            elif [[ "$repo_to_complete" =~ "^@.+/" ]]; then
                repo_to_complete="${repo_to_complete/\@}"
                compadd -U -S '' "$repo_to_complete"
                return
            fi

            if [[ "$repo_to_complete" =~ "^@([a-z0-9_][a-z0-9_-]*)$" ]];
            then
                local users
                local username="$match[1]"

                if [[ "$#username" -lt 2 ]]; then
                    compadd -x "Users (type at least two characters)"
                    return
                fi

                local _git_hub_cached_users
                local cache_key="git-hub-search-user-$username"
                if _cache_invalid $cache_key || ! _retrieve_cache $cache_key ; then
                    users=( $( git hub search-user "$username in:login" --raw --count 100 | tr '[:upper:]' '[:lower:]' | sed -e 's/^/@/' ) )
                    _git_hub_cached_users=("${users[@]}")
                    _store_cache $cache_key _git_hub_cached_users
                else
                    users=("${_git_hub_cached_users[@]}")
                fi

                if [[ ${#users[@]} -eq 1 ]]; then
                    local user="$users[1]"
                    user="${user/\@/}"
                    compadd -S / -U -X "Users:" "$user"
                else
                    compadd -U -X "Users:" $users
                fi

            else
                local username reponame
                if [[ "$repo_to_complete" =~ "^([a-z0-9_][a-z0-9_-]+)/([a-zA-Z0-9_.-]*)" ]];
                then
                    local username="$match[1]"
                    local reponame="$match[2]"
                else
                    # git hub repo foobar<TAB>
                    username=`git hub config login`
                    reponame="$repo_to_complete"
                fi
                local reponames

                local _git_hub_cached_repos
                local cache_key="git-hub-search-repo-$username/repo-$reponame"
                if _cache_invalid $cache_key || ! _retrieve_cache $cache_key ; then
                    IFS=$'\n' set -A reponames `git hub search-repo "$reponame user:$username in:name fork:true" --raw --count 100`
                    _git_hub_cached_repos=("${reponames[@]}")
                    _store_cache $cache_key _git_hub_cached_repos
                else
                    reponames=("${_git_hub_cached_repos[@]}")
                fi

                compadd -X "Repos:" $reponames
            fi
        ;;

        config|config-unset)
            local config_keys
            IFS=$'\n' set -A config_keys `git hub config-keys`
            compadd -X "Config keys:" $config_keys
        ;;
        help)
            compadd cache-clear clone collabs comment config config-keys config-list config-unset follow followers following follows fork forks gist gist-clone gist-delete gist-edit gist-fork gist-get gist-init gist-new gist-star gist-unstar gists git-hub-travis help info irc-enable irc-enable irc-url issue issue-close issue-edit issue-new issue-resolve issues keys keys-add member-add member-get member-remove members notify-list open org org-edit org-get org-members org-repos orgs pr-created pr-diff pr-fetch pr-involves pr-list pr-merge pr-new pr-queue repo repo-delete repo-edit repo-get repo-init repo-new repos scope-add scope-remove scopes search-issues search-repo search-user setup star starred stars team team-delete team-members team-new team-repo-add team-repos teams token-delete token-get token-new tokens trust unfollow unstar untrust unwatch upgrade url user user-edit user-get version watch watchers watching
        ;;
        esac
    ;;
    esac

}

_git-hub-complete-remote() {
    local dynamic_comp
    IFS=$'\n' set -A  dynamic_comp `git remote`
    compadd -X "remote:" $dynamic_comp
}


_git_hub_caching_policy() {
    local -a oldp
    # older than 20 minutes
    oldp=( "$1"(mm+20) )
    (( $#oldp )) && return 0
    return 1
}


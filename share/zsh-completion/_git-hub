#compdef git-hub -P git\ ##hub
#description perform GitHub operations

# DO NOT EDIT. This file generated by tool/generate-completion.pl.

if [[ -z $GIT_HUB_ROOT ]]; then
	echo 'GIT_HUB_ROOT is null; has `/path/to/git-hub/init` been sourced?'
	return 3
fi

_git-hub() {
    typeset -A opt_args
    local curcontext="$curcontext" state line context

    _arguments -s \
        '1: :->subcmd' \
        '2: :->repo' \
        '-h[Show the command summary]' \
        '--help[Browse the complete '"'"'git-hub'"'"' documentation]' \
        '--remote[Remote name (like '"'"'origin'"'"')]:remote' \
        '--branch[Branch name (like '"'"'master'"'"')]:branch' \
        '--org[GitHub organization name]:org' \
        '(-c --count)'{-c,--count}'[Number of list items to show]:c' \
        '(-a --all)'{-a,--all}'[Show all list items]' \
        '(-q --quiet)'{-q,--quiet}'[Show minimal output]' \
        '(-v --verbose)'{-v,--verbose}'[Show verbose output]' \
        '(-r --raw)'{-r,--raw}'[Show output data in a raw form]' \
        '(-j --json)'{-j,--json}'[Show output data in JSON]' \
        '(-A --use-auth)'{-A,--use-auth}'[Force the use of authentication. (Get around rate limits)]' \
        '(-C --no-cache)'{-C,--no-cache}'[Don'"'"'t use cached responses.]' \
        '--token[Explicitly specify the GitHub v3 API Authentication Token]:token' \
        '(-d --dryrun)'{-d,--dryrun}'[Check arguments but don'"'"'t actually run the API command]' \
        '-T[Show (don'"'"'t hide) API token in the verbose output]' \
        '-O[Debug - Show response output]' \
        '-H[Debug - Show reponse headers]' \
        '-J[Debug - Show parsed JSON response]' \
        '-R[Debug - Repeat last command without contacting server]' \
        '-x[Debug - Turn on Bash trace (set -x) output]' \
        && ret=0

    case $state in
    subcmd)
        compadd cache-clear clone collabs comment config config-unset follow followers following follows fork forks gist gist-clone gist-delete gist-edit gist-get gist-new gist-star gist-unstar gists git-hub-travis help info irc-enable irc-enable irc-url issue issue-close issue-edit issue-new issue-resolve issues keys keys-add member-add member-get member-remove members notify-list open org org-edit org-get org-members org-repos orgs pr-diff pr-fetch pr-list pr-merge pr-new pr-queue repo repo-delete repo-edit repo-get repo-init repo-new repos scope-add scope-remove scopes setup star starred stars team team-delete team-members team-new team-repo-add team-repos teams token-delete token-get token-new tokens trust unfollow unstar untrust unwatch upgrade url user user-edit user-get version watch watchers watching
    ;;
    repo)
        case $line[1] in
        clone|collabs|comment|fork|forks|issue|issue-close|issue-edit|issue-new|issue-resolve|issues|open|pr-diff|pr-fetch|pr-list|pr-merge|repo|repo-delete|repo-edit|repo-get|star|stars|trust|unstar|untrust|unwatch|url|watch|watchers)
            if [[ $line[2] =~ "^(\w+)/(.*)" ]];
            then
                local username="$match[1]"
                if [[ "$username" != "$__git_hub_lastusername" ]];
                then
                    __git_hub_lastusername=$username
                    IFS=$'\n' set -A  __git_hub_reponames `git hub repos $username --raw`
                fi
                compadd -X "Repos:" $__git_hub_reponames
            else
                _arguments "2:Repos:()"
            fi
        ;;
        esac
    ;;
    esac

}

